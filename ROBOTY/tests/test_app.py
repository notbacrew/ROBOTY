#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ROBOTY –±–µ–∑ GUI.
"""
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.parser import parse_input
from core.planner import run_planner_algorithm
from core.collision import check_collisions_detailed, get_collision_summary
from viz.visualizer import show_visualization

def setup_test_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def test_file(file_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–ê: {file_path}")
    print(f"{'='*60}")
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
        scenario = parse_input(file_path)
        print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìä –†–æ–±–æ—Ç–æ–≤: {len(scenario.robots)}")
        print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π: {len(scenario.operations)}")
        print(f"   üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {scenario.safe_dist}")
        
        # 2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π...")
        plan = run_planner_algorithm(scenario, assignment_method="balanced")
        print(f"   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   ‚è±Ô∏è  Makespan: {plan['makespan']:.2f} —Å–µ–∫")
        print(f"   ü§ñ –†–æ–±–æ—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(plan['robots'])}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π...")
        collisions = check_collisions_detailed(plan)
        if collisions:
            summary = get_collision_summary(collisions)
            print(f"   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(collisions)} –∫–æ–ª–ª–∏–∑–∏–π")
            print(f"   üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Ä–æ–±–æ—Ç–æ–≤: {summary['affected_robots']}")
        else:
            print(f"   ‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        try:
            show_visualization(plan, "3d")
            print(f"   ‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        try:
            show_visualization(plan, "2d_xy")
            print(f"   ‚úÖ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        print(f"\n‚úÖ –¢–ï–°–¢ –§–ê–ô–õ–ê {file_path} –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {file_path}: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    setup_test_logging()
    
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ROBOTY")
    print("="*60)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_files = [
        "data/test_scenario_simple.json",
        "data/test_scenario_complex.json", 
        "data/example_schedule.json",
        "data/test_scenario_collision.txt"
    ]
    
    successful_tests = 0
    total_tests = 0
    
    for test_file_path in test_files:
        full_path = os.path.join(os.path.dirname(__file__), test_file_path)
        if os.path.exists(full_path):
            total_tests += 1
            if test_file(full_path):
                successful_tests += 1
        else:
            print(f"\n‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
    
    if successful_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        return 1

if __name__ == "__main__":
    sys.exit(main())
