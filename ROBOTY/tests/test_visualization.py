#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ GUI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Plotly.
"""
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.parser import parse_input
from core.planner import run_planner_algorithm
from viz.visualizer import show_visualization

def test_visualization():
    """–¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ROBOTY")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
        file_path = os.path.join(os.path.dirname(__file__), "data", "test_scenario_simple.json")
        scenario = parse_input(file_path)
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenario.robots)} —Ä–æ–±–æ—Ç–æ–≤, {len(scenario.operations)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º
        print("\n2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        plan = run_planner_algorithm(scenario)
        print(f"   ‚úÖ Makespan: {plan['makespan']:.2f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print("   üìä –°–æ–∑–¥–∞–Ω–∏–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        show_visualization(plan, "3d")
        print("   ‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print("   üìä –°–æ–∑–¥–∞–Ω–∏–µ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        show_visualization(plan, "2d_xy")
        print("   ‚úÖ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüìÅ HTML —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ ROBOTY")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.WARNING)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    success = test_visualization()
    sys.exit(0 if success else 1)
