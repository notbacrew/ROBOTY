from PySide6 import QtWidgets, QtCore, QtGui
import sys
import logging
import os
from datetime import datetime
from ui_files.main_window_improved import Ui_MainWindow
from ui_files.input_generator_dialog import InputGeneratorDialog
from ui_files.styles_final import get_light_style, get_dark_style, get_colors
from core.parser import parse_input_file
from core.planner import run_planner_algorithm
from core.collision import check_collisions, check_collisions_detailed, get_collision_summary
from viz.visualizer import show_visualization
from core.safety import enforce_online_safety
from core.parser_txt import RobotConfig, Operation
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = os.path.join(log_dir, f"roboty_{timestamp}.log")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger("ROBOTY")
    root_logger.setLevel(logging.DEBUG)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π
    for module_name in ["parser", "parser_txt", "assigner", "planner", "collision", "visualizer"]:
        module_logger = logging.getLogger(f"ROBOTY.{module_name}")
        module_logger.setLevel(logging.DEBUG)
    
    return log_file

class MainApp(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_file = setup_logging()
        self.logger = logging.getLogger("ROBOTY.main")
        self.logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ROBOTY")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.pushButton_load.clicked.connect(self.load_file)
        self.pushButton_run.clicked.connect(self.run_planner)
        self.pushButton_viz.clicked.connect(self.open_visualizer)
        self.pushButton_save.clicked.connect(self.save_result)
        self.pushButton_clear_logs.clicked.connect(self.clear_logs)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            self.pushButton_input_gen.clicked.connect(self.open_input_generator)
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.comboBox_assignment_method.currentTextChanged.connect(self.update_genetic_controls)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
        self.actionLoad.triggered.connect(self.load_file)
        self.actionSave.triggered.connect(self.save_result)
        self.actionSaveAs.triggered.connect(self.save_result_as)
        self.actionExit.triggered.connect(self.close)
        self.actionAbout.triggered.connect(self.show_about)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.input_data = None
        self.plan = None
        self.current_theme = 'light'  # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
        self.apply_theme(self.current_theme)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö
        self.textLog.append(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –§–∞–π–ª –ª–æ–≥–æ–≤: {self.log_file}")
        self.textLog.append(f"üé® –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {self.current_theme.title()}")
        self.logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.update_genetic_controls()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.setup_theme_toggle()

    def save_result(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.plan:
            self.textLog.append("–ù–µ—Ç –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ –ø–ª–∞–Ω–∞")
            return
        
        self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        results_dir = os.path.join(os.path.dirname(__file__), "outputs", "results")
        os.makedirs(results_dir, exist_ok=True)
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", results_dir, 
            "Text Files (*.txt);;JSON Files (*.json)"
        )
        
        if path:
            try:
                if path.endswith('.json'):
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                    import json
                    with open(path, 'w', encoding='utf-8') as f:
                        json.dump(self.plan, f, indent=2, ensure_ascii=False)
                    self.logger.info(f"–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON: {path}")
                else:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ TXT —Ñ–æ—Ä–º–∞—Ç–µ
                    from core.parser_txt import save_plan_to_txt
                    robots_waypoints = []
                    for robot in self.plan["robots"]:
                        waypoints = []
                        for wp in robot["trajectory"]:
                            t = wp.get("t", 0.0)
                            x = wp.get("x", 0.0)
                            y = wp.get("y", 0.0)
                            z = wp.get("z", 0.0)
                            waypoints.append((t, x, y, z))
                        robots_waypoints.append((robot["id"], waypoints))
                    
                    makespan = self.plan.get("makespan", 0.0)
                    save_plan_to_txt(path, makespan, robots_waypoints)
                    self.logger.info(f"–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TXT: {path}")
                
                self.textLog.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"
                self.textLog.append(error_msg)
                self.logger.error(error_msg, exc_info=True)

    def load_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞")
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", "data/",
            "JSON Files (*.json);;Text Files (*.txt);;All Files (*)"
        )
        
        if path:
            self.textLog.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {path}")
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {path}")
            
            try:
                self.input_data = parse_input_file(path)
                self.textLog.append("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω.")
                self.logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if hasattr(self.input_data, 'robots'):
                    self.textLog.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: {len(self.input_data.robots)}")
                if hasattr(self.input_data, 'operations'):
                    self.textLog.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(self.input_data.operations)}")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"
                self.textLog.append(error_msg)
                self.logger.error(error_msg, exc_info=True)

    def run_planner(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        assignment_method = self.get_assignment_method()
        self.textLog.append(f"–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –º–µ—Ç–æ–¥–æ–º: {assignment_method}")
        
        if not self.input_data:
            self.textLog.append("‚ùå –ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        try:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if assignment_method == "genetic":
                genetic_params = self.get_genetic_parameters()
                self.textLog.append(f"üß¨ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
                self.textLog.append(f"   - –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {genetic_params['population_size']}")
                self.textLog.append(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π: {genetic_params['generations']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ
                from core.genetic_algorithm import assign_operations_genetic
                assignments = assign_operations_genetic(
                    self.input_data, 
                    genetic_params['population_size'], 
                    genetic_params['generations']
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                from core.planner import plan_robot_trajectory, calculate_makespan
                robot_trajectories = []
                robot_plans = []
                
                for i, (robot, operations) in enumerate(zip(self.input_data.robots, assignments)):
                    trajectory = plan_robot_trajectory(robot, operations)
                    robot_trajectories.append(trajectory)
                    
                    viz_trajectory = []
                    for wp in trajectory:
                        viz_trajectory.append({
                            "t": wp[0], "x": wp[1], "y": wp[2], "z": wp[3]
                        })
                    
                    robot_plans.append({
                        "id": i + 1,
                        "base_xyz": robot.base_xyz,
                        "trajectory": viz_trajectory,
                        "tool_clearance": robot.tool_clearance,
                        "operations_count": len(operations)
                    })
                
                makespan = calculate_makespan(robot_trajectories)
                self.plan = {
                    "robots": robot_plans,
                    "makespan": makespan,
                    "safe_dist": self.input_data.safe_dist,
                    "assignment_method": assignment_method
                }
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.plan = run_planner_algorithm(self.input_data, assignment_method)
            
            self.textLog.append("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
            self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            makespan = self.plan.get("makespan", 0.0)
            self.textLog.append(f"üìä Makespan: {makespan:.2f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
            self.textLog.append("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π...")
            collisions = check_collisions_detailed(self.plan)

            if collisions:
                self.textLog.append(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(collisions)} –∫–æ–ª–ª–∏–∑–∏–π! –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—É–∑—ã...")
                summary = get_collision_summary(collisions)
                self.textLog.append(f"ü§ñ –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Ä–æ–±–æ—Ç–æ–≤: {summary['affected_robots']}")
                self.logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(collisions)} –∫–æ–ª–ª–∏–∑–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–≤—Å—Ç–∞–≤–∫–∞ –ø–∞—É–∑) –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                self.plan = enforce_online_safety(self.plan, time_step=0.05, pause_duration=0.6)
                safe_collisions = check_collisions_detailed(self.plan)
                if safe_collisions:
                    self.textLog.append(f"‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—É–∑ –≤—Å–µ –µ—â–µ {len(safe_collisions)} –∫–æ–ª–ª–∏–∑–∏–π.")
                    self.logger.warning("–ö–æ–ª–ª–∏–∑–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—É–∑")
                else:
                    self.textLog.append("‚úÖ –ö–æ–ª–ª–∏–∑–∏–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏.")
                    self.logger.info("–ö–æ–ª–ª–∏–∑–∏–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
            else:
                self.textLog.append("‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
                self.logger.info("–ö–æ–ª–ª–∏–∑–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç
            try:
                if not isinstance(self.plan.get("objects"), list) or len(self.plan.get("objects", [])) == 0:
                    robots = self.plan.get("robots", [])
                    if robots:
                        r0 = robots[0]
                        traj = r0.get("trajectory", [])
                        if len(traj) >= 2:
                            t_min = traj[0].get("t", 0.0)
                            t_max = traj[-1].get("t", t_min)
                            t1 = t_min + 0.25 * (t_max - t_min)
                            t2 = t_min + 0.75 * (t_max - t_min)
                            start_pos = (traj[0].get("x", 0.0), traj[0].get("y", 0.0), max(0.0, traj[0].get("z", 0.0) - 0.05))
                            self.plan["objects"] = [
                                {
                                    "id": 1,
                                    "type": "cube",
                                    "initial_position": list(start_pos),
                                    "size": 0.1,
                                    "color": "red",
                                    "carried_by": r0.get("id", 1),
                                    "carry_intervals": [[float(t1), float(t2)]]
                                }
                            ]
                            self.textLog.append("üß± –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (–∫—Ä–∞—Å–Ω—ã–π –∫—É–±) –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç: {e}")
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}"
            self.textLog.append(error_msg)
            self.logger.error(error_msg, exc_info=True)

    def open_visualizer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.logger.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        self.textLog.append("–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        
        if not self.plan:
            self.textLog.append("–ù–µ—Ç –ø–ª–∞–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –ø–ª–∞–Ω–∞")
            return
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.textLog.append("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            self.textLog.repaint()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
            # –†–µ–∂–∏–º –∏–∑ UI
            try:
                viz_mode = self.get_visualization_mode() if hasattr(self, 'get_visualization_mode') else "3d_anim"
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ 3D-–º–µ—à–∞ —Ä—É–∫–∏ –≤ –ø–ª–∞–Ω
                if hasattr(self, 'get_arm_mesh_enabled') and isinstance(self.plan, dict):
                    self.plan["arm_mesh"] = bool(self.get_arm_mesh_enabled())
                # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                if hasattr(self, 'get_robot_model_enabled') and hasattr(self, 'get_robot_model_selection') and isinstance(self.plan, dict):
                    if bool(self.get_robot_model_enabled()):
                        selection = self.get_robot_model_selection()
                        mesh_map = {
                            "KUKA KR QUANTEC": ("assets/robots/kuka/kr_quantec.obj", 1.0),
                            "KUKA KR 360 FORTEC": ("assets/robots/kuka/kr_360_fortec.obj", 1.0),
                            "KUKA KR 300": ("assets/robots/kuka/kr_300.obj", 1.0),
                        }
                        path, scale = mesh_map.get(selection, (None, None))
                        if path:
                            self.plan["robot_mesh"] = {"path": path, "scale": scale}
            except Exception:
                viz_mode = "3d_anim"
            show_visualization(self.plan, viz_mode)
            self.textLog.append("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.textLog.append("üìÅ HTML —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ ROBOTY")
            self.textLog.append("üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            self.logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            self.textLog.append(error_msg)
            self.textLog.append("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–Ω–æ–≤–æ")
            self.logger.error(error_msg, exc_info=True)

    def update_genetic_controls(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        is_genetic = self.comboBox_assignment_method.currentText().startswith("Genetic")
        self.label_genetic_population.setVisible(is_genetic)
        self.spinBox_population_size.setVisible(is_genetic)
        self.label_genetic_generations.setVisible(is_genetic)
        self.spinBox_generations.setVisible(is_genetic)

    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.textLog.clear()
        self.textLog.append("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
        self.logger.info("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def get_assignment_method(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        method_map = {
            "Round Robin (–ø–æ –æ—á–µ—Ä–µ–¥–∏)": "round_robin",
            "Balanced (–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏)": "balanced",
            "Distance Based (–ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é)": "distance_based",
            "Genetic Algorithm (–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π)": "genetic"
        }
        return method_map.get(self.comboBox_assignment_method.currentText(), "balanced")

    def get_genetic_parameters(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        return {
            "population_size": self.spinBox_population_size.value(),
            "generations": self.spinBox_generations.value()
        }

    def apply_theme(self, theme_name):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (–≤–∫–ª—é—á–∞—è –¥–∏–∞–ª–æ–≥–∏)"""
        try:
            if theme_name == 'light':
                style = get_light_style()
                self.current_theme = 'light'
            elif theme_name == 'dark':
                style = get_dark_style()
                self.current_theme = 'dark'
            else:
                style = get_light_style()
                self.current_theme = 'light'

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, —á—Ç–æ–±—ã –≤—Å–µ –æ–∫–Ω–∞/–¥–∏–∞–ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
            app = QtWidgets.QApplication.instance()
            if app is not None:
                app.setStyleSheet(style)
            else:
                # fallback: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –æ–∫–Ω—É
                self.setStyleSheet(style)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(self, 'pushButton_theme_toggle'):
                if self.current_theme == 'light':
                    self.pushButton_theme_toggle.setText("üåô")
                    self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É")
                else:
                    self.pushButton_theme_toggle.setText("‚òÄÔ∏è")
                    self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
            
            self.logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: {theme_name}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã {theme_name}: {e}")

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π"""
        new_theme = 'dark' if self.current_theme == 'light' else 'light'
        self.apply_theme(new_theme)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        self.textLog.append(f"üé® –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_theme.title()} —Ç–µ–º—É")
        self.logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã: {self.current_theme} -> {new_theme}")

    def save_result_as(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã–±–æ—Ä–æ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        try:
            if self.plan is None:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                return
            
            file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                "", 
                "JSON —Ñ–∞–π–ª—ã (*.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
            )
            
            if file_path:
                import json
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.plan, f, indent=2, ensure_ascii=False)
                
                self.textLog.append(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {file_path}")
                
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        try:
            about_text = """
            <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                <h2 style="color: #2E8B57; margin-bottom: 20px;">ü§ñ ROBOTY v1.0.0</h2>
                <h3 style="color: #4682B4; margin-bottom: 15px;">–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –º–Ω–æ–≥–æ—Ä–æ–±–æ—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</h3>
                
                <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                    <strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</strong> –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π 
                    –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–ª–∏–∑–∏–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
                </p>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4 style="color: #2E8B57; margin-top: 0;">üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li><strong>4 –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</strong> Round Robin, Balanced, Distance Based, Genetic</li>
                        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π:</strong> –¢—Ä–∞–ø–µ—Ü–µ–∏–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏</li>
                        <li><strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π:</strong> –ú–µ–∂–¥—É —Ä–æ–±–æ—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏</li>
                        <li><strong>3D/2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Plotly</li>
                        <li><strong>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</li>
                        <li><strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</strong> JSON –∏ TXT</li>
                    </ul>
                </div>
                
                <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4 style="color: #4682B4; margin-top: 0;">‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ú–æ–¥—É–ª—å–Ω–∞—è, —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è</li>
                        <li><strong>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> 46 unit-—Ç–µ—Å—Ç–æ–≤</li>
                        <li><strong>UI/UX:</strong> –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ–º–∞–º–∏</li>
                        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã</li>
                        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</li>
                    </ul>
                </div>
                
                <div style="border-top: 2px solid #2E8B57; padding-top: 15px; margin-top: 20px;">
                    <p style="margin: 5px 0;"><strong>üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</strong> ROBOTY Team</p>
                    <p style="margin: 5px 0;"><strong>üìß Email:</strong> roboty@example.com</p>
                    <p style="margin: 5px 0;"><strong>üåê GitHub:</strong> github.com/notbacrew/ROBOTY</p>
                    <p style="margin: 5px 0;"><strong>üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è:</strong> MIT License</p>
                    <p style="margin: 5px 0;"><strong>üêç Python:</strong> 3.8+</p>
                </div>
                
                <div style="text-align: center; margin-top: 20px; color: #666; font-size: 12px;">
                    <p>¬© 2025 ROBOTY Team. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                    <p>–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</p>
                </div>
            </div>
            """
            
            QtWidgets.QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ ROBOTY", about_text)
            self.logger.info("–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ': {e}")

    def open_input_generator(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª"""
        try:
            dlg = InputGeneratorDialog(self)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –¥–∏–∞–ª–æ–≥—É
            if hasattr(self, 'current_theme'):
                if self.current_theme == 'dark':
                    from ui_files.styles_final import get_dark_style
                    dlg.setStyleSheet(get_dark_style())
                else:
                    from ui_files.styles_final import get_light_style
                    dlg.setStyleSheet(get_light_style())
            if dlg.exec() == QtWidgets.QDialog.Accepted and getattr(dlg, 'saved_path', None):
                path = dlg.saved_path
                self.textLog.append(f"üì• –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {path}")
                self.logger.info(f"–°–æ–∑–¥–∞–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {path}")
                if getattr(dlg, 'load_into_app', False):
                    try:
                        self.input_data = parse_input_file(path)
                        self.textLog.append("‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                        if hasattr(self.input_data, 'robots'):
                            self.textLog.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: {len(self.input_data.robots)}")
                        if hasattr(self.input_data, 'operations'):
                            self.textLog.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(self.input_data.operations)}")
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}"
                        self.textLog.append(error_msg)
                        self.logger.error(error_msg, exc_info=True)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
            self.textLog.append(error_msg)
            self.logger.error(error_msg, exc_info=True)

    def setup_theme_toggle(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã"""
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.pushButton_theme_toggle = QtWidgets.QPushButton("üåô")
        self.pushButton_theme_toggle.setProperty("class", "theme-toggle")
        self.pushButton_theme_toggle.clicked.connect(self.toggle_theme)
        self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.theme_container = QtWidgets.QWidget()
        self.theme_layout = QtWidgets.QHBoxLayout(self.theme_container)
        self.theme_layout.setContentsMargins(0, 0, 0, 0)
        self.theme_layout.addStretch()
        self.theme_layout.addWidget(self.pushButton_theme_toggle)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –≥–ª–∞–≤–Ω—ã–π layout
        self.verticalLayout_main.addWidget(self.theme_container)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        app = QtWidgets.QApplication(sys.argv)
        app.setApplicationName("ROBOTY")
        app.setApplicationVersion("1.0")
        
        window = MainApp()
        window.show()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        logger = logging.getLogger("ROBOTY.main")
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()