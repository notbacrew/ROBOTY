#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ä—É–∫–∏
"""

import os
import sys
import time
from typing import List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from core.mesh_loader import load_obj
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å mesh_loader")
    sys.exit(1)

def test_model_loading(filepath: str) -> Tuple[bool, int, int, float]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    if not os.path.exists(filepath):
        return False, 0, 0, 0.0
    
    start_time = time.time()
    result = load_obj(filepath)
    load_time = time.time() - start_time
    
    if result is None:
        return False, 0, 0, load_time
    
    xs, ys, zs, is_, js_, ks_ = result
    vertex_count = len(xs)
    face_count = len(is_)
    
    return True, vertex_count, face_count, load_time

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ä—É–∫–∏-—Ä–æ–±–æ—Ç–∞ –¥–ª—è ROBOTY")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models = [
        ("hand_ultra_simple.obj", "–£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å"),
        ("hand_simple.obj", "–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å"),
        ("hand_optimized.obj", "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å"),
        ("hand_auto_optimized.obj", "–ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å"),
        ("1758706684_68d3bbfcdbb32.obj", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
    ]
    
    results = []
    
    for filename, description in models:
        filepath = os.path.join("assets", "robots", filename)
        print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
        print(f"   –§–∞–π–ª: {filepath}")
        
        success, vertices, faces, load_time = test_model_loading(filepath)
        
        if success:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"   üìä –í–µ—Ä—à–∏–Ω: {vertices:,}")
            print(f"   üìä –ì—Ä–∞–Ω–µ–π: {faces:,}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.3f} —Å–µ–∫")
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if vertices < 100:
                perf = "üöÄ –û—Ç–ª–∏—á–Ω–∞—è"
            elif vertices < 500:
                perf = "‚ö° –•–æ—Ä–æ—à–∞—è"
            elif vertices < 2000:
                perf = "‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è"
            else:
                perf = "üêå –ù–∏–∑–∫–∞—è"
            
            print(f"   üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf}")
            
            results.append({
                'name': description,
                'file': filename,
                'vertices': vertices,
                'faces': faces,
                'load_time': load_time,
                'performance': perf
            })
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            results.append({
                'name': description,
                'file': filename,
                'vertices': 0,
                'faces': 0,
                'load_time': 0,
                'performance': "‚ùå –û—à–∏–±–∫–∞"
            })
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("\n" + "=" * 60)
    print("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    print(f"{'–ú–æ–¥–µ–ª—å':<25} {'–í–µ—Ä—à–∏–Ω':<10} {'–ì—Ä–∞–Ω–µ–π':<10} {'–í—Ä–µ–º—è':<8} {'–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'}")
    print("-" * 60)
    
    for result in results:
        print(f"{result['name']:<25} {result['vertices']:<10,} {result['faces']:<10,} {result['load_time']:<8.3f} {result['performance']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    working_models = [r for r in results if r['vertices'] > 0]
    
    if working_models:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
        fastest = min(working_models, key=lambda x: x['load_time'])
        print(f"üöÄ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: {fastest['name']} ({fastest['load_time']:.3f} —Å–µ–∫)")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        most_detailed = max(working_models, key=lambda x: x['vertices'])
        print(f"üé® –°–∞–º–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è: {most_detailed['name']} ({most_detailed['vertices']:,} –≤–µ—Ä—à–∏–Ω)")
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (–±–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        optimal = min(working_models, key=lambda x: x['vertices'] * x['load_time'])
        print(f"‚öñÔ∏è  –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è: {optimal['name']} (–±–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)")
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("   ‚Ä¢ –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: hand_optimized.obj")
    print("   ‚Ä¢ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: hand_simple.obj") 
    print("   ‚Ä¢ –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ä–æ–±–æ—Ç–æ–≤: hand_ultra_simple.obj")
    print("   ‚Ä¢ –î–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π: hand_auto_optimized.obj")
    print("   ‚Ä¢ –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: 1758706684_68d3bbfcdbb32.obj")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
