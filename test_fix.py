#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–±–æ—Ç–∞–º–∏
"""

import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

sys.path.append(os.path.dirname(__file__))

def test_multiple_robots():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —Å 12 —Ä–æ–±–æ—Ç–∞–º–∏"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from core.parser import parse_input_file
        from core.assigner import assign_operations
        from core.planner import run_planner_algorithm
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å 12 —Ä–æ–±–æ—Ç–∞–º–∏...")
        data = parse_input_file('data/test_scenario_10_robots.json')
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
        print(f"   - –†–æ–±–æ—Ç–æ–≤: {len(data.robots)}")
        print(f"   - –û–ø–µ—Ä–∞—Ü–∏–π: {len(data.operations)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        methods = ["round_robin", "balanced", "distance_based"]
        
        for method in methods:
            print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥: {method}")
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            assignments = assign_operations(data, method)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–±–æ—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
            empty_robots = [i for i, ops in enumerate(assignments) if not ops]
            if empty_robots:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method}: —Ä–æ–±–æ—Ç—ã {empty_robots} –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π!")
            else:
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method}: –≤—Å–µ —Ä–æ–±–æ—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for i, ops in enumerate(assignments):
                print(f"   - –†–æ–±–æ—Ç {i+1}: {len(ops)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–µ—Ç–æ–¥–æ–º 'balanced'...")
        result = run_planner_algorithm(data, "balanced")
        
        print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   - Makespan: {result['makespan']:.2f}")
        print(f"   - –†–æ–±–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(result['robots'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–±–æ—Ç—ã –∏–º–µ—é—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        robots_with_trajectories = 0
        robots_without_trajectories = 0
        
        for robot in result['robots']:
            if len(robot['trajectory']) > 1:  # –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è)
                robots_with_trajectories += 1
                print(f"   ‚úÖ –†–æ–±–æ—Ç {robot['id']}: {robot['operations_count']} –æ–ø–µ—Ä–∞—Ü–∏–π, {len(robot['trajectory'])} —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
            else:
                robots_without_trajectories += 1
                print(f"   ‚ö†Ô∏è –†–æ–±–æ—Ç {robot['id']}: {robot['operations_count']} –æ–ø–µ—Ä–∞—Ü–∏–π, {len(robot['trajectory'])} —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π)")
        
        print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –†–æ–±–æ—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏: {robots_with_trajectories}")
        print(f"   - –†–æ–±–æ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏: {robots_without_trajectories}")
        
        if robots_without_trajectories > len(data.robots) // 2:
            print("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π!")
            return False
        else:
            print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
            return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_multiple_robots()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–±–æ—Ç–∞–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        sys.exit(1)
