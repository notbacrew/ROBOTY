#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–æ–±–æ—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from core.parser import parse_input_file
from core.assigner import assign_operations
from core.planner import run_planner_algorithm

def test_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å 12 —Ä–æ–±–æ—Ç–∞–º–∏"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å 12 —Ä–æ–±–æ—Ç–∞–º–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = parse_input_file('data/test_scenario_10_robots.json')
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
        print(f"   - –†–æ–±–æ—Ç–æ–≤: {len(data.robots)}")
        print(f"   - –û–ø–µ—Ä–∞—Ü–∏–π: {len(data.operations)}")
        print(f"   - Safe distance: {data.safe_dist}")
        
        # –í—ã–≤–æ–¥–∏–º ID —Ä–æ–±–æ—Ç–æ–≤
        robot_ids = [r.id for r in data.robots]
        print(f"   - ID —Ä–æ–±–æ—Ç–æ–≤: {robot_ids}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π...")
        assignments = assign_operations(data, "balanced")
        
        print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        for i, ops in enumerate(assignments):
            print(f"   - –†–æ–±–æ—Ç {i+1}: {len(ops)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π...")
        result = run_planner_algorithm(data, "balanced")
        
        print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   - Makespan: {result['makespan']:.2f}")
        print(f"   - –†–æ–±–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(result['robots'])}")
        
        for robot in result['robots']:
            print(f"   - –†–æ–±–æ—Ç {robot['id']}: {robot['operations_count']} –æ–ø–µ—Ä–∞—Ü–∏–π, {len(robot['trajectory'])} —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_parsing()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        sys.exit(1)
