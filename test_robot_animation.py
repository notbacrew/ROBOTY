#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏ —Ä–æ–±–æ—Ç–∞
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from viz.visualizer import show_visualization

def create_test_plan():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π —Ä–æ–±–æ—Ç–∞"""
    plan = {
        "robots": [
            {
                "id": 1,
                "base_xyz": [0, 0, 0],
                "trajectory": [
                    {"t": 0.0, "x": 0.0, "y": 0.0, "z": 0.0},
                    {"t": 1.0, "x": 1.0, "y": 0.0, "z": 0.5},
                    {"t": 2.0, "x": 2.0, "y": 1.0, "z": 1.0},
                    {"t": 3.0, "x": 1.5, "y": 2.0, "z": 0.5},
                    {"t": 4.0, "x": 0.5, "y": 1.5, "z": 0.0}
                ],
                "tool_clearance": 0.1
            },
            {
                "id": 2,
                "base_xyz": [3, 0, 0],
                "trajectory": [
                    {"t": 0.0, "x": 3.0, "y": 0.0, "z": 0.0},
                    {"t": 1.5, "x": 2.0, "y": 1.0, "z": 0.5},
                    {"t": 3.0, "x": 1.0, "y": 2.0, "z": 1.0},
                    {"t": 4.5, "x": 2.5, "y": 1.5, "z": 0.5}
                ],
                "tool_clearance": 0.1
            }
        ],
        "makespan": 4.5,
        "safe_dist": 0.3,
        "assignment_method": "test",
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 3D –∞–Ω–∏–º–∞—Ü–∏–∏
        "robot_mesh": {
            "path": "assets/robots/hand_optimized.obj",
            "scale": 1.0
        },
        "max_anim_frames": 150,
        "anim_time_stride": 0.1,
        "light_mesh_anim": False,  # –ü–æ–ª–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏
        "arm_mesh": False  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–Ω—ã–µ —Ä—É–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º 3D –º–æ–¥–µ–ª—å
    }
    return plan

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏ —Ä–æ–±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
    plan = create_test_plan()
    
    print("üìã –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å 2 —Ä–æ–±–æ—Ç–∞–º–∏")
    print("üéØ –†–æ–±–æ—Ç 1: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∏–∑ 5 —Ç–æ—á–µ–∫")
    print("üéØ –†–æ–±–æ—Ç 2: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∏–∑ 4 —Ç–æ—á–µ–∫")
    print("üé® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 3D –º–æ–¥–µ–ª—å: hand_optimized.obj")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–∏...")
        from core.mesh_loader import load_obj
        mesh_data = load_obj("assets/robots/hand_optimized.obj", 1.0)
        
        if mesh_data:
            xs, ys, zs, is_, js_, ks_ = mesh_data
            print(f"‚úÖ 3D –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   - –í–µ—Ä—à–∏–Ω: {len(xs)}")
            print(f"   - –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {len(is_)}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–∏")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑—ã —Ä–æ–±–æ—Ç–∞
        print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑—ã —Ä–æ–±–æ—Ç–∞...")
        from viz.visualizer import _create_robot_pose_mesh
        
        base = (0, 0, 0)
        tcp = (1, 0, 0.5)
        color = "blue"
        robot_id = 1
        
        pose_mesh = _create_robot_pose_mesh(mesh_data, base, tcp, color, robot_id, 0.5)
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ 3D –ø–æ–∑—ã —Ä–æ–±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã 3D –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ main.py –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
