# -*- coding: utf-8 -*-
"""
–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ 3D –æ–∫–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ROBOTY
"""

from PySide6 import QtWidgets, QtCore, QtGui
try:
    from PySide6 import QtWebEngineWidgets
    WEBENGINE_AVAILABLE = True
except ImportError:
    WEBENGINE_AVAILABLE = False
import sys
import logging
import os
import tempfile
from datetime import datetime
from typing import Dict, Any, Optional

from viz.visualizer import show_visualization


class Desktop3DViewer(QtWidgets.QMainWindow):
    """–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, plan_data=None):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger("ROBOTY.3d_viewer")
        self.log_file = self.setup_logging()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.plan_data = plan_data
        self.html_file_path = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setup_window()
        self.setup_ui()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if self.plan_data:
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞: {len(self.plan_data.get('robots', []))} —Ä–æ–±–æ—Ç–æ–≤")
            self.generate_visualization()
        else:
            self.logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        self.logger.info("3D Viewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = os.path.join(log_dir, f"3d_viewer_{timestamp}.log")
        
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        logger = logging.getLogger("ROBOTY_3D_VIEWER")
        logger.setLevel(logging.DEBUG)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return log_file
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.setWindowTitle("üñ•Ô∏è ROBOTY 3D Viewer - –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–∫–æ–Ω–∫–∞ –æ–∫–Ω–∞
        self.setWindowIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ComputerIcon))
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        self.main_layout = QtWidgets.QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(10)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.create_info_panel()
        
        # WebView –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_web_view()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.create_control_panel()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QtWidgets.QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    def create_info_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        info_group = QtWidgets.QGroupBox("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ")
        info_group.setMaximumHeight(100)
        info_layout = QtWidgets.QHBoxLayout(info_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–±–æ—Ç–∞—Ö
        self.robots_label = QtWidgets.QLabel("–†–æ–±–æ—Ç–æ–≤: 0")
        self.robots_label.setStyleSheet("font-weight: bold; color: #2E8B57;")
        info_layout.addWidget(self.robots_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_label = QtWidgets.QLabel("Makespan: 0.00 —Å–µ–∫")
        self.time_label.setStyleSheet("font-weight: bold; color: #4682B4;")
        info_layout.addWidget(self.time_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–∏–∑–∏—è—Ö
        self.collisions_label = QtWidgets.QLabel("–ö–æ–ª–ª–∏–∑–∏–π: 0")
        self.collisions_label.setStyleSheet("font-weight: bold; color: #DC143C;")
        info_layout.addWidget(self.collisions_label)
        
        info_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = QtWidgets.QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
        self.refresh_button.clicked.connect(self.refresh_visualization)
        info_layout.addWidget(self.refresh_button)
        
        self.main_layout.addWidget(info_group)
    
    def create_web_view(self):
        """–°–æ–∑–¥–∞–µ—Ç WebView –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            if WEBENGINE_AVAILABLE:
                # –°–æ–∑–¥–∞–µ–º WebEngineView
                self.web_view = QtWebEngineWidgets.QWebEngineView()
                self.web_view.setMinimumHeight(500)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebEngine
                self.web_view.settings().setAttribute(QtWebEngineWidgets.QWebEngineSettings.WebGLEnabled, True)
                self.web_view.settings().setAttribute(QtWebEngineWidgets.QWebEngineSettings.Accelerated2dCanvasEnabled, True)
                self.web_view.settings().setAttribute(QtWebEngineWidgets.QWebEngineSettings.AutoLoadImages, True)
                
                self.main_layout.addWidget(self.web_view)
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å matplotlib
                self.create_native_3d_viewer()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebView: {e}")
            # Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            self.create_native_3d_viewer()
    
    def create_native_3d_viewer(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å matplotlib"""
        try:
            import matplotlib.pyplot as plt
            from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
            from matplotlib.figure import Figure
            import numpy as np
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É matplotlib (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
            self.fig = Figure(figsize=(14, 10), dpi=100)
            self.ax = self.fig.add_subplot(111, projection='3d')
            
            # –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è PySide6
            self.web_view = FigureCanvas(self.fig)
            self.web_view.setMinimumHeight(500)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 3D –æ—Å–µ–π
            self.ax.set_xlabel('X (m)')
            self.ax.set_ylabel('Y (m)')
            self.ax.set_zlabel('Z (m)')
            self.ax.set_title('ROBOTY 3D Visualization - Desktop Mode')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∞
            self.ax.view_init(elev=20, azim=45)
            
            self.main_layout.addWidget(self.web_view)
            
            self.logger.info("–°–æ–∑–¥–∞–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å matplotlib")
            
        except ImportError:
            # –ï—Å–ª–∏ matplotlib –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç
            self.logger.warning("matplotlib –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç")
            self.web_view = QtWidgets.QLabel(
                "üñ•Ô∏è ROBOTY 3D Viewer\n\n"
                "‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
                "‚Ä¢ –¢–æ—á–µ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π\n"
                "‚Ä¢ 3D –º–æ–¥–µ–ª–∏ —Ä–æ–±–æ—Ç–æ–≤ KUKA\n"
                "‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä—É–∫"
            )
            self.web_view.setAlignment(QtCore.Qt.AlignCenter)
            self.web_view.setStyleSheet("""
                QLabel {
                    color: #2E8B57;
                    font-size: 14px;
                    background-color: #f8f9fa;
                    border: 2px solid #2E8B57;
                    border-radius: 10px;
                    padding: 20px;
                    min-height: 400px;
                }
            """)
            self.main_layout.addWidget(self.web_view)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            self.web_view = QtWidgets.QLabel("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            self.main_layout.addWidget(self.web_view)
    
    def create_matplotlib_visualization(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å matplotlib"""
        try:
            if not hasattr(self, 'ax') or self.ax is None:
                self.logger.warning("matplotlib axes –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            self.ax.clear()
            
            robots = plan.get("robots", [])
            colors = ['blue', 'red', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 
                     'cyan', 'magenta', 'yellow', 'lime', 'navy', 'maroon', 'olive', 'teal',
                     'coral', 'gold', 'silver', 'indigo', 'violet', 'crimson', 'darkgreen', 'darkblue']
            
            for i, robot in enumerate(robots):
                color = colors[i % len(colors)]
                trajectory = robot.get("trajectory", [])
                
                if not trajectory:
                    continue
                
                # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                step = max(1, len(trajectory) // 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 20 –¥–æ 50 —Ç–æ—á–µ–∫
                key_trajectory = trajectory[::step]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                xs = [p["x"] for p in key_trajectory]
                ys = [p["y"] for p in key_trajectory]
                zs = [p["z"] for p in key_trajectory]
                
                # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è - —Ç–æ—á–∫–∏ –∏ –ª–∏–Ω–∏–∏
                self.ax.scatter(xs, ys, zs, c=color, s=50, alpha=0.8, label=f"Robot {robot['id']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                if len(xs) > 1:
                    self.ax.plot(xs, ys, zs, color=color, linewidth=1, alpha=0.5, linestyle='--')
                
                # –ë–∞–∑–∞ —Ä–æ–±–æ—Ç–∞
                base_xyz = robot.get("base_xyz", [0, 0, 0])
                self.ax.scatter([base_xyz[0]], [base_xyz[1]], [base_xyz[2]], 
                              c=color, s=200, marker='s', alpha=0.9)
                
                # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä—É–∫–∏ (–ª–∏–Ω–∏–∏ –æ—Ç –±–∞–∑—ã –∫ TCP)
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑ –¥–ª—è —Ä—É–∫
                arm_step = max(1, len(key_trajectory) // 8)  # –ë–æ–ª—å—à–µ –ø–æ–∑ –¥–ª—è —Ä—É–∫
                for j, point in enumerate(key_trajectory[::arm_step]):
                    base = tuple(robot.get("base_xyz", [0, 0, 0]))
                    tcp = (point["x"], point["y"], point["z"])
                    
                    # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –æ—Ç –±–∞–∑—ã –∫ TCP
                    self.ax.plot([base[0], tcp[0]], [base[1], tcp[1]], [base[2], tcp[2]], 
                               color=color, linewidth=3, alpha=0.7)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º TCP —Ç–æ—á–∫—É
                    self.ax.scatter([tcp[0]], [tcp[1]], [tcp[2]], 
                                  c=color, s=30, marker='o', alpha=0.8)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
            self.ax.set_xlabel('X (m)', fontsize=12)
            self.ax.set_ylabel('Y (m)', fontsize=12)
            self.ax.set_zlabel('Z (m)', fontsize=12)
            self.ax.set_title(f'ROBOTY 3D Visualization - {len(robots)} robots', fontsize=14, fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            self.ax.grid(True, alpha=0.3)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∞
            self.ax.view_init(elev=20, azim=45)
            
            # –õ–µ–≥–µ–Ω–¥–∞
            if robots:
                self.ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º canvas
            if hasattr(self, 'web_view') and hasattr(self.web_view, 'draw'):
                self.web_view.draw()
            
            self.logger.info("matplotlib –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è matplotlib –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_group = QtWidgets.QGroupBox("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_group.setMaximumHeight(80)
        control_layout = QtWidgets.QHBoxLayout(control_group)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        self.open_browser_button = QtWidgets.QPushButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        self.open_browser_button.setToolTip("–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
        self.open_browser_button.clicked.connect(self.open_in_browser)
        control_layout.addWidget(self.open_browser_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button = QtWidgets.QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML")
        self.save_button.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Ñ–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.save_button.clicked.connect(self.save_html)
        control_layout.addWidget(self.save_button)
        
        control_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = QtWidgets.QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_button.setToolTip("–ó–∞–∫—Ä—ã—Ç—å 3D Viewer")
        self.close_button.clicked.connect(self.close)
        control_layout.addWidget(self.close_button)
        
        self.main_layout.addWidget(control_group)
    
    def generate_visualization(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        if not self.plan_data:
            self.status_bar.showMessage("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        try:
            self.status_bar.showMessage("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            self.logger.info(f"–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: 3d_desktop")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan = dict(self.plan_data)
            self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤: {len(plan.get('robots', []))}")
            robots = plan.get("robots", [])
            n_robots = len(robots)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º 3D –º–æ–¥–µ–ª–∏)
            if n_robots >= 4:
                plan["max_anim_frames"] = 60
                plan["anim_time_stride"] = 0.2
                plan["arm_segments"] = 2
                # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º 3D –º–æ–¥–µ–ª–∏ - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                plan["arm_mesh"] = True    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                self.logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã (3D –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            
            if n_robots >= 8:
                plan["max_anim_frames"] = 40
                plan["anim_time_stride"] = 0.3
                plan["arm_segments"] = 1
                # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º 3D –º–æ–¥–µ–ª–∏ –¥–∞–∂–µ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—Ü–µ–Ω
                self.logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã (3D –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan["desktop_mode"] = True
            plan["high_performance"] = True
            plan["light_mesh_anim"] = True
            plan["arm_details"] = True  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä—É–∫
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–∫ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan["arm_segments"] = 3
            plan["arm_bulge"] = 0.1
            plan["arm_model"] = "curved"
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º 3D –º–æ–¥–µ–ª—å —Ä–æ–±–æ—Ç–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan["robot_mesh"] = {
                "path": "assets/robots/kuka/kr_300.obj",
                "scale": 0.1  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            }
            self.logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ 3D –º–æ–¥–µ–ª—å —Ä–æ–±–æ—Ç–∞ KUKA KR 300")
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä—É–∫—É –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan["hand_definition"] = {
                "path": "assets/robots/hand_ultra_simple_hand_def.txt",
                "scale": 1.0
            }
            self.logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å —Ä—É–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if WEBENGINE_AVAILABLE and hasattr(self, 'web_view') and isinstance(self.web_view, QtWebEngineWidgets.QWebEngineView):
                # WebEngine –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                self.logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å WebEngine")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è HTML
                temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='_viz_3d_desktop.html', delete=False)
                self.html_file_path = temp_file.name
                temp_file.close()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                def progress_callback(progress):
                    self.status_bar.showMessage(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {int(progress)}%")
                    QtWidgets.QApplication.processEvents()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                show_visualization(plan, "3d_desktop", progress_callback=progress_callback)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –≤ WebView
                self.load_html_in_viewer()
            else:
                # WebEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º matplotlib –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                self.logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º matplotlib –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
                
                # –°–æ–∑–¥–∞–µ–º matplotlib –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                self.create_matplotlib_visualization(plan)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.update_info_panel()
            
            self.status_bar.showMessage("‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
            self.logger.info("3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            self.status_bar.showMessage(error_msg)
            self.logger.error(error_msg, exc_info=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ WebView
            if hasattr(self, 'web_view') and isinstance(self.web_view, QtWebEngineWidgets.QWebEngineView):
                error_html = f"""
                <html>
                <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
                    <h2 style="color: red;">‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
                    <p style="color: #666;">{str(e)}</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</p>
                </body>
                </html>
                """
                self.web_view.setHtml(error_html)
    
    def load_html_in_viewer(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –≤ WebView"""
        try:
            if WEBENGINE_AVAILABLE and hasattr(self, 'web_view') and isinstance(self.web_view, QtWebEngineWidgets.QWebEngineView):
                # –ò—â–µ–º HTML —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
                html_files = []
                for root, dirs, files in os.walk("."):
                    for file in files:
                        if file.endswith("_viz_3d_desktop.html") or file.endswith("_viz_3d_anim.html") or file.endswith("_viz_3d.html"):
                            html_files.append(os.path.join(root, file))
                
                if html_files:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                    latest_file = max(html_files, key=os.path.getmtime)
                    file_url = QtCore.QUrl.fromLocalFile(os.path.abspath(latest_file))
                    self.web_view.load(file_url)
                    self.html_file_path = os.path.abspath(latest_file)
                    self.logger.info(f"HTML —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    placeholder_html = """
                    <html>
                    <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
                        <h2 style="color: #4682B4;">üñ•Ô∏è ROBOTY 3D Viewer</h2>
                        <p>3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–¥–µ—Å—å</p>
                        <p>–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</p>
                    </body>
                    </html>
                    """
                    self.web_view.setHtml(placeholder_html)
            else:
                # WebEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                self.logger.info("WebEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                import webbrowser
                
                # –ò—â–µ–º HTML —Ñ–∞–π–ª
                html_files = []
                for root, dirs, files in os.walk("."):
                    for file in files:
                        if file.endswith("_viz_3d_desktop.html") or file.endswith("_viz_3d_anim.html") or file.endswith("_viz_3d.html"):
                            html_files.append(os.path.join(root, file))
                
                if html_files:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    latest_file = max(html_files, key=os.path.getmtime)
                    webbrowser.open(f"file://{os.path.abspath(latest_file)}")
                    self.html_file_path = os.path.abspath(latest_file)
                    self.logger.info(f"HTML —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {latest_file}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ fallback –≤–∏–¥–∂–µ—Ç–µ
                if hasattr(self, 'web_view') and isinstance(self.web_view, QtWidgets.QLabel):
                    self.web_view.setText(
                        "üñ•Ô∏è ROBOTY 3D Viewer\n\n"
                        "‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
                        "‚Ä¢ –¢–æ—á–µ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π\n"
                        "‚Ä¢ 3D –º–æ–¥–µ–ª–∏ —Ä–æ–±–æ—Ç–æ–≤ KUKA\n"
                        "‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä—É–∫"
                    )
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
    
    def update_info_panel(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏"""
        if not self.plan_data:
            return
        
        try:
            robots = self.plan_data.get("robots", [])
            makespan = self.plan_data.get("makespan", 0.0)
            
            self.robots_label.setText(f"–†–æ–±–æ—Ç–æ–≤: {len(robots)}")
            self.time_label.setText(f"Makespan: {makespan:.2f} —Å–µ–∫")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            collisions_count = 0
            if "collisions" in self.plan_data:
                collisions_count = len(self.plan_data["collisions"])
            elif "collision_count" in self.plan_data:
                collisions_count = self.plan_data["collision_count"]
            
            self.collisions_label.setText(f"–ö–æ–ª–ª–∏–∑–∏–π: {collisions_count}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def refresh_visualization(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.generate_visualization()
    
    def open_in_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if self.html_file_path and os.path.exists(self.html_file_path):
                import webbrowser
                webbrowser.open(f"file://{self.html_file_path}")
                self.status_bar.showMessage("üåê –û—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                self.logger.info(f"HTML —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {self.html_file_path}")
            else:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
    
    def save_html(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML —Ñ–∞–π–ª"""
        try:
            if self.html_file_path and os.path.exists(self.html_file_path):
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                    self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Ñ–∞–π–ª", "roboty_visualization.html",
                    "HTML Files (*.html);;All Files (*)"
                )
                
                if file_path:
                    import shutil
                    shutil.copy2(self.html_file_path, file_path)
                    self.status_bar.showMessage(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                    self.logger.info(f"HTML —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            else:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ 3D Viewer")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if self.html_file_path and os.path.exists(self.html_file_path):
                try:
                    os.unlink(self.html_file_path)
                    self.logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ 3D Viewer"""
    try:
        app = QtWidgets.QApplication(sys.argv)
        app.setApplicationName("ROBOTY 3D Viewer")
        app.setApplicationVersion("1.0")
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        window = Desktop3DViewer()
        window.show()
        
        logger = logging.getLogger("ROBOTY_3D_VIEWER.main")
        logger.info("3D Viewer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ 3D Viewer: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
