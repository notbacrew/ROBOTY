# -*- coding: utf-8 -*-
from PySide6 import QtWidgets, QtCore, QtGui
import json
import os
import math
import random
from datetime import datetime


class ChessFieldWidget(QtWidgets.QWidget):
    """–í–∏–¥–∂–µ—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–≤"""
    
    positions_changed = QtCore.Signal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.robot_positions = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (row, col)
        self.grid_size = 8  # –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ 8x8
        self.cell_size = 40  # –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        self.max_robots = 64  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ (8x8)
        self.setMinimumSize(self.grid_size * self.cell_size, self.grid_size * self.cell_size)
        self.setMaximumSize(self.grid_size * self.cell_size, self.grid_size * self.cell_size)
        
    def paintEvent(self, event):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)
        
        # –û—á–∏—â–∞–µ–º —Ñ–æ–Ω
        painter.fillRect(self.rect(), QtGui.QColor(240, 240, 240))
        
        # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
        for row in range(self.grid_size):
            for col in range(self.grid_size):
                x = col * self.cell_size
                y = row * self.cell_size
                
                # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
                if (row + col) % 2 == 0:
                    color = QtGui.QColor(255, 255, 255)  # –ë–µ–ª—ã–π
                else:
                    color = QtGui.QColor(200, 200, 200)  # –°–µ—Ä—ã–π
                
                # –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å —Ä–æ–±–æ—Ç, –¥–µ–ª–∞–µ–º —è—á–µ–π–∫—É –±–µ–ª–æ–π
                if (row, col) in self.robot_positions:
                    color = QtGui.QColor(255, 255, 255)  # –ë–µ–ª—ã–π –¥–ª—è —è—á–µ–µ–∫ —Å —Ä–æ–±–æ—Ç–∞–º–∏
                
                painter.fillRect(x, y, self.cell_size, self.cell_size, color)
                
                # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
                painter.setPen(QtGui.QPen(QtGui.QColor(100, 100, 100), 1))
                painter.drawRect(x, y, self.cell_size, self.cell_size)
                
                # –†–∏—Å—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                painter.setPen(QtGui.QPen(QtGui.QColor(50, 50, 50), 1))
                font = painter.font()
                font.setPointSize(8)
                painter.setFont(font)
                painter.drawText(x + 2, y + 12, f"{row},{col}")
                
                # –†–∏—Å—É–µ–º —Ä–æ–±–æ—Ç–∞, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
                if (row, col) in self.robot_positions:
                    center_x = x + self.cell_size // 2
                    center_y = y + self.cell_size // 2
                    radius = self.cell_size // 3
                    
                    # –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Ä–æ–±–æ—Ç–∞
                    painter.setBrush(QtGui.QBrush(QtGui.QColor(255, 100, 100)))
                    painter.setPen(QtGui.QPen(QtGui.QColor(200, 0, 0), 2))
                    painter.drawEllipse(center_x - radius, center_y - radius, radius * 2, radius * 2)
                    
                    # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Ä–æ–±–æ—Ç–∞
                    painter.setPen(QtGui.QPen(QtGui.QColor(255, 255, 255), 2))
                    font = painter.font()
                    font.setPointSize(10)
                    font.setBold(True)
                    painter.setFont(font)
                    robot_num = len([p for p in self.robot_positions if p <= (row, col)])
                    painter.drawText(center_x - 5, center_y + 3, str(robot_num))
    
    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏"""
        if event.button() == QtCore.Qt.LeftButton:
            col = event.x() // self.cell_size
            row = event.y() // self.cell_size
            
            if 0 <= row < self.grid_size and 0 <= col < self.grid_size:
                if (row, col) in self.robot_positions:
                    # –£–±–∏—Ä–∞–µ–º —Ä–æ–±–æ—Ç–∞
                    self.robot_positions.remove((row, col))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–æ–±–æ—Ç–æ–≤
                    if len(self.robot_positions) >= self.max_robots:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                        from PySide6.QtWidgets import QMessageBox
                        QMessageBox.warning(self, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç", 
                                          f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤: {self.max_robots}\n"
                                          f"–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                        return
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–±–æ—Ç–∞
                    self.robot_positions.add((row, col))
                
                self.update()
                self.positions_changed.emit()
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
        self.robot_positions.clear()
        self.update()
        self.positions_changed.emit()
    
    def get_positions(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Ä–æ–±–æ—Ç–æ–≤"""
        return sorted(list(self.robot_positions))
    
    def set_positions(self, positions):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤"""
        self.robot_positions = set(positions)
        self.update()
        self.positions_changed.emit()
    
    def get_robot_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤"""
        return len(self.robot_positions)
    
    def set_max_robots(self, max_robots):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤"""
        # –ï—Å–ª–∏ max_robots = 0, —Ç–æ –ª–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ)
        # –ï—Å–ª–∏ max_robots > 0, —Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ª—è
        if max_robots > 0:
            self.max_robots = min(max_robots, 64)  # –ù–µ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
        else:
            self.max_robots = 64  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è


class InputGeneratorDialog(QtWidgets.QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (JSON –∏–ª–∏ TXT) —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ROBOTY")
        self.setModal(True)
        self.setAttribute(QtCore.Qt.WA_StyledBackground, True)
        self.resize(720, 600)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll_area = QtWidgets.QScrollArea()
        scroll_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(scroll_widget)
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        
        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.addWidget(scroll_area)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        basic_group = QtWidgets.QGroupBox("ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        basic_layout = QtWidgets.QFormLayout(basic_group)
        
        self.spin_robots = QtWidgets.QSpinBox()
        self.spin_robots.setRange(1, 200)
        self.spin_robots.setValue(10)
        basic_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤:", self.spin_robots)

        self.spin_ops = QtWidgets.QSpinBox()
        self.spin_ops.setRange(0, 5000)
        self.spin_ops.setValue(30)
        basic_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π:", self.spin_ops)

        self.spin_safe = QtWidgets.QDoubleSpinBox()
        self.spin_safe.setRange(0.0, 10.0)
        self.spin_safe.setDecimals(3)
        self.spin_safe.setSingleStep(0.05)
        self.spin_safe.setValue(0.3)
        basic_layout.addRow("Safe distance (–º):", self.spin_safe)

        self.spin_tool = QtWidgets.QDoubleSpinBox()
        self.spin_tool.setRange(0.0, 5.0)
        self.spin_tool.setDecimals(3)
        self.spin_tool.setSingleStep(0.05)
        self.spin_tool.setValue(0.1)
        basic_layout.addRow("Tool clearance (–º):", self.spin_tool)
        
        layout.addWidget(basic_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        space_group = QtWidgets.QGroupBox("üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
        space_layout = QtWidgets.QFormLayout(space_group)
        
        # –†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        self.spin_space_width = QtWidgets.QDoubleSpinBox()
        self.spin_space_width.setRange(1.0, 1000.0)
        self.spin_space_width.setDecimals(2)
        self.spin_space_width.setSingleStep(0.5)
        self.spin_space_width.setValue(10.0)
        space_layout.addRow("–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–º):", self.spin_space_width)

        self.spin_space_height = QtWidgets.QDoubleSpinBox()
        self.spin_space_height.setRange(1.0, 1000.0)
        self.spin_space_height.setDecimals(2)
        self.spin_space_height.setSingleStep(0.5)
        self.spin_space_height.setValue(10.0)
        space_layout.addRow("–î–ª–∏–Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–º):", self.spin_space_height)

        self.spin_space_depth = QtWidgets.QDoubleSpinBox()
        self.spin_space_depth.setRange(1.0, 1000.0)
        self.spin_space_depth.setDecimals(2)
        self.spin_space_depth.setSingleStep(0.5)
        self.spin_space_depth.setValue(5.0)
        space_layout.addRow("–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–º, –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π):", self.spin_space_depth)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        self.label_recommendations = QtWidgets.QLabel()
        self.label_recommendations.setWordWrap(True)
        self.label_recommendations.setStyleSheet("color: #666; font-style: italic;")
        self.update_recommendations()
        space_layout.addRow("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", self.label_recommendations)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.spin_robots.valueChanged.connect(self.update_recommendations)
        self.spin_space_width.valueChanged.connect(self.update_recommendations)
        self.spin_space_height.valueChanged.connect(self.update_recommendations)
        self.spin_space_depth.valueChanged.connect(self.update_recommendations)
        
        layout.addWidget(space_group)

        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–≤
        robot_group = QtWidgets.QGroupBox("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–≤")
        self.robot_layout = QtWidgets.QFormLayout(robot_group)
        
        self.combo_robot_layout = QtWidgets.QComboBox()
        self.combo_robot_layout.addItems([
            "–®–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ (—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)",
            "–°–µ—Ç–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
            "–õ–∏–Ω–∏—è (–≤–¥–æ–ª—å X)",
            "–ö—Ä—É–≥ (–ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)",
            "–°–ª—É—á–∞–π–Ω–æ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ)",
            "–°–ª—É—á–∞–π–Ω–æ (–∫–ª–∞—Å—Ç–µ—Ä—ã)"
        ])
        self.robot_layout.addRow("–°–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", self.combo_robot_layout)

        # –®–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.chess_widget = QtWidgets.QWidget()
        chess_layout = QtWidgets.QVBoxLayout(self.chess_widget)
        
        chess_info = QtWidgets.QLabel("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–º –ø–æ–ª–µ:")
        chess_info.setStyleSheet("font-weight: bold; color: #2E8B57;")
        chess_layout.addWidget(chess_info)
        
        # –°–æ–∑–¥–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
        self.chess_field = ChessFieldWidget()
        self.chess_field.setMinimumSize(400, 300)
        chess_layout.addWidget(self.chess_field)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω—ã–º –ø–æ–ª–µ–º
        chess_buttons = QtWidgets.QHBoxLayout()
        
        self.btn_clear_robots = QtWidgets.QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        self.btn_clear_robots.clicked.connect(self.chess_field.clear_all)
        chess_buttons.addWidget(self.btn_clear_robots)
        
        self.btn_fill_grid = QtWidgets.QPushButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫–æ–π")
        self.btn_fill_grid.clicked.connect(self.fill_chess_grid)
        chess_buttons.addWidget(self.btn_fill_grid)
        
        self.btn_random_place = QtWidgets.QPushButton("üé≤ –°–ª—É—á–∞–π–Ω–æ")
        self.btn_random_place.clicked.connect(self.random_place_robots)
        chess_buttons.addWidget(self.btn_random_place)
        
        chess_layout.addLayout(chess_buttons)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        self.robot_positions_info = QtWidgets.QLabel("–í—ã–±—Ä–∞–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: 0")
        self.robot_positions_info.setStyleSheet("color: #4682B4; font-weight: bold;")
        chess_layout.addWidget(self.robot_positions_info)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        self.chess_field.positions_changed.connect(self.update_robot_positions_info)
        
        self.robot_layout.addRow(self.chess_widget)

        self.spin_robot_spacing = QtWidgets.QDoubleSpinBox()
        self.spin_robot_spacing.setRange(0.5, 50.0)
        self.spin_robot_spacing.setDecimals(2)
        self.spin_robot_spacing.setSingleStep(0.1)
        self.spin_robot_spacing.setValue(2.0)
        self.robot_layout.addRow("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–æ–±–æ—Ç–∞–º–∏ (–º):", self.spin_robot_spacing)

        self.spin_robot_margin = QtWidgets.QDoubleSpinBox()
        self.spin_robot_margin.setRange(0.0, 10.0)
        self.spin_robot_margin.setDecimals(2)
        self.spin_robot_margin.setSingleStep(0.1)
        self.spin_robot_margin.setValue(1.0)
        self.robot_layout.addRow("–û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ (–º):", self.spin_robot_margin)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.combo_robot_layout.currentTextChanged.connect(self.on_layout_type_changed)
        
        layout.addWidget(robot_group)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        advanced_group = QtWidgets.QGroupBox("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        advanced_layout = QtWidgets.QFormLayout(advanced_group)

        self.chk_random = QtWidgets.QCheckBox("–î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –ø–æ–∑–∏—Ü–∏—è–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        self.chk_random.setChecked(True)
        advanced_layout.addRow(self.chk_random)

        seed_layout = QtWidgets.QHBoxLayout()
        self.spin_seed = QtWidgets.QSpinBox()
        self.spin_seed.setRange(0, 10_000_000)
        self.spin_seed.setValue(0)
        seed_layout.addWidget(QtWidgets.QLabel("Seed (0 ‚Äî –∞–≤—Ç–æ):"))
        seed_layout.addWidget(self.spin_seed)
        advanced_layout.addRow(seed_layout)

        fmt_layout = QtWidgets.QHBoxLayout()
        fmt_layout.addWidget(QtWidgets.QLabel("–§–æ—Ä–º–∞—Ç:"))
        self.combo_fmt = QtWidgets.QComboBox()
        self.combo_fmt.addItems(["JSON", "TXT"])
        fmt_layout.addWidget(self.combo_fmt)
        advanced_layout.addRow(fmt_layout)
        
        layout.addWidget(advanced_group)

        # –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        path_group = QtWidgets.QGroupBox("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        path_layout = QtWidgets.QVBoxLayout(path_group)
        
        path_input_layout = QtWidgets.QHBoxLayout()
        self.edit_path = QtWidgets.QLineEdit()
        default_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data")
        os.makedirs(default_dir, exist_ok=True)
        default_name = f"input_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.edit_path.setText(os.path.join(default_dir, default_name))
        self.combo_fmt.currentTextChanged.connect(self._update_default_ext)
        btn_browse = QtWidgets.QPushButton("–í—ã–±—Ä–∞—Ç—å...")
        btn_browse.clicked.connect(self.on_browse)
        path_input_layout.addWidget(self.edit_path)
        path_input_layout.addWidget(btn_browse)
        path_layout.addLayout(path_input_layout)
        
        layout.addWidget(path_group)

        # –ö–Ω–æ–ø–∫–∏
        btns = QtWidgets.QDialogButtonBox()
        self.btn_generate_load = btns.addButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å", QtWidgets.QDialogButtonBox.AcceptRole)
        self.btn_generate_save = btns.addButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", QtWidgets.QDialogButtonBox.ApplyRole)
        self.btn_cancel = btns.addButton(QtWidgets.QDialogButtonBox.Cancel)
        layout.addWidget(btns)

        self.btn_generate_load.clicked.connect(lambda: self.on_generate(load_into_app=True))
        self.btn_generate_save.clicked.connect(lambda: self.on_generate(load_into_app=False))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
        self.chess_widget.setVisible(False)  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.spin_robot_spacing.setVisible(True)
        self.spin_robot_margin.setVisible(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.on_layout_type_changed(self.combo_robot_layout.currentText())
        
        self.btn_cancel.clicked.connect(self.reject)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.saved_path = None
        self.load_into_app = False

    def update_recommendations(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        n_robots = self.spin_robots.value()
        width = self.spin_space_width.value()
        height = self.spin_space_height.value()
        depth = self.spin_space_depth.value()
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤ (–æ–Ω–∏ —Å—Ç–æ—è—Ç –Ω–∞ –ø–æ–ª—É)
        min_robot_spacing = 2.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–æ–±–æ—Ç–∞–º–∏
        recommended_width = math.ceil(math.sqrt(n_robots)) * min_robot_spacing
        recommended_height = math.ceil(math.sqrt(n_robots)) * min_robot_spacing
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (—Ä–æ–±–æ—Ç—ã —Å—Ç–æ—è—Ç –Ω–∞ z=0, –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ)
        recommended_depth = max(2.0, n_robots * 0.3)  # –º–∏–Ω–∏–º—É–º 2–º, –ø–ª—é—Å 0.3–º –Ω–∞ —Ä–æ–±–æ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤
        current_area = width * height
        recommended_area = recommended_width * recommended_height
        
        if current_area < recommended_area:
            status = "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤"
            color = "#d32f2f"
        elif current_area < recommended_area * 1.5:
            status = "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞"
            color = "#388e3c"
        else:
            status = "‚úÖ –ú–Ω–æ–≥–æ –º–µ—Å—Ç–∞"
            color = "#1976d2"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
        if depth < recommended_depth:
            height_status = "‚ö†Ô∏è –ú–∞–ª–æ –≤—ã—Å–æ—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"
            height_color = "#d32f2f"
        else:
            height_status = "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ—Ç—ã"
            height_color = "#388e3c"
        
        recommendations = f"""
        <div style="color: {color};">
        <b>{status}</b><br>
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {recommended_width:.1f}√ó{recommended_height:.1f} –º<br>
        –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥—å: {current_area:.1f} –º¬≤<br>
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—â–∞–¥—å: {recommended_area:.1f} –º¬≤<br>
        <div style="color: {height_color}; margin-top: 5px;">
        <b>{height_status}</b><br>
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞: {recommended_depth:.1f} –º<br>
        –¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: {depth:.1f} –º<br>
        <small>–†–æ–±–æ—Ç—ã —Å—Ç–æ—è—Ç –Ω–∞ –ø–æ–ª—É (z=0), –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ</small>
        </div>
        </div>
        """
        
        self.label_recommendations.setText(recommendations)

    def showEvent(self, event: QtGui.QShowEvent) -> None:
        # –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            # –°–±—Ä–æ—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å app.setStyleSheet
            self.setStyleSheet("")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç —Å—Ç–∏–ª—å
            for widget in self.findChildren(QtWidgets.QWidget):
                if hasattr(widget, 'setStyleSheet'):
                    widget.setStyleSheet("")
        except Exception:
            pass
        return super().showEvent(event)

    def _update_default_ext(self):
        path = self.edit_path.text()
        if not path:
            return
        base, ext = os.path.splitext(path)
        if self.combo_fmt.currentText() == "JSON":
            self.edit_path.setText(base + ".json")
        else:
            self.edit_path.setText(base + ".txt")

    def on_browse(self):
        fmt = self.combo_fmt.currentText()
        filt = "JSON Files (*.json)" if fmt == "JSON" else "Text Files (*.txt)"
        path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", self.edit_path.text(), filt)
        if path:
            self.edit_path.setText(path)

    def on_generate(self, load_into_app: bool):
        try:
            n_robots = self.spin_robots.value()
            n_ops = self.spin_ops.value()
            safe_dist = self.spin_safe.value()
            tool_clear = self.spin_tool.value()
            space_width = self.spin_space_width.value()
            space_height = self.spin_space_height.value()
            space_depth = self.spin_space_depth.value()
            robot_spacing = self.spin_robot_spacing.value()
            robot_margin = self.spin_robot_margin.value()
            robot_layout = self.combo_robot_layout.currentText()
            randomize = self.chk_random.isChecked()
            seed = self.spin_seed.value()
            if seed == 0:
                seed = int(datetime.now().timestamp())

            fmt = self.combo_fmt.currentText()
            path = self.edit_path.text()
            os.makedirs(os.path.dirname(path), exist_ok=True)

            if fmt == "JSON":
                data = self._build_json(n_robots, n_ops, safe_dist, tool_clear, 
                                      space_width, space_height, space_depth,
                                      robot_spacing, robot_margin, robot_layout,
                                      randomize, seed)
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
            else:
                content = self._build_txt(n_robots, n_ops, safe_dist, tool_clear,
                                        space_width, space_height, space_depth,
                                        robot_spacing, robot_margin, robot_layout,
                                        randomize, seed)
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(content)

            self.saved_path = path
            self.load_into_app = load_into_app
            self.accept()
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {e}")

    @staticmethod
    def _rng(randomize: bool, seed: int) -> random.Random:
        rng = random.Random()
        rng.seed(seed)
        return rng

    def _generate_robot_positions(self, n_robots: int, space_width: float, space_height: float, 
                                 space_depth: float, robot_spacing: float, robot_margin: float,
                                 layout_type: str, rng: random.Random) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        positions = []
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        effective_width = space_width - 2 * robot_margin
        effective_height = space_height - 2 * robot_margin
        effective_depth = space_depth - 2 * robot_margin
        
        if layout_type == "–®–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ (—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            return self._generate_chess_positions(space_width, space_height, space_depth, 
                                                robot_spacing, robot_margin)
        
        elif layout_type == "–°–µ—Ç–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)":
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞
            cols = max(1, int(math.ceil(math.sqrt(n_robots))))
            rows = int(math.ceil(n_robots / cols))
            
            step_x = effective_width / max(1, cols - 1) if cols > 1 else 0
            step_y = effective_height / max(1, rows - 1) if rows > 1 else 0
            
            for i in range(n_robots):
                row = i // cols
                col = i % cols
                x = robot_margin + col * step_x
                y = robot_margin + row * step_y
                z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –∑–µ–º–ª–µ
                positions.append((round(x, 3), round(y, 3), round(z, 3)))
                
        elif layout_type == "–õ–∏–Ω–∏—è (–≤–¥–æ–ª—å X)":
            # –õ–∏–Ω–∏—è –≤–¥–æ–ª—å X
            step_x = effective_width / max(1, n_robots - 1) if n_robots > 1 else 0
            for i in range(n_robots):
                x = robot_margin + i * step_x
                y = robot_margin + effective_height / 2
                z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –∑–µ–º–ª–µ
                positions.append((round(x, 3), round(y, 3), round(z, 3)))
                
        elif layout_type == "–ö—Ä—É–≥ (–ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)":
            # –ö—Ä—É–≥
            radius = min(effective_width, effective_height) / 2 - robot_spacing
            center_x = robot_margin + effective_width / 2
            center_y = robot_margin + effective_height / 2
            
            for i in range(n_robots):
                angle = 2 * math.pi * i / n_robots
                x = center_x + radius * math.cos(angle)
                y = center_y + radius * math.sin(angle)
                z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –∑–µ–º–ª–µ
                positions.append((round(x, 3), round(y, 3), round(z, 3)))
                
        elif layout_type == "–°–ª—É—á–∞–π–Ω–æ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ)":
            # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            for i in range(n_robots):
                x = robot_margin + rng.uniform(0, effective_width)
                y = robot_margin + rng.uniform(0, effective_height)
                z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –∑–µ–º–ª–µ
                positions.append((round(x, 3), round(y, 3), round(z, 3)))
                
        elif layout_type == "–°–ª—É—á–∞–π–Ω–æ (–∫–ª–∞—Å—Ç–µ—Ä—ã)":
            # –°–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
            n_clusters = max(1, n_robots // 3)
            cluster_size = n_robots // n_clusters
            
            for cluster in range(n_clusters):
                cluster_x = robot_margin + rng.uniform(0, effective_width)
                cluster_y = robot_margin + rng.uniform(0, effective_height)
                cluster_z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –∑–µ–º–ª–µ
                
                cluster_robots = cluster_size if cluster < n_clusters - 1 else n_robots - cluster * cluster_size
                for i in range(cluster_robots):
                    x = cluster_x + rng.gauss(0, robot_spacing / 2)
                    y = cluster_y + rng.gauss(0, robot_spacing / 2)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    x = max(robot_margin, min(robot_margin + effective_width, x))
                    y = max(robot_margin, min(robot_margin + effective_height, y))
                    z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –ø–æ–ª—É (z = 0)
                    
                    positions.append((round(x, 3), round(y, 3), round(z, 3)))
        
        return positions

    def _build_json(self, n_robots: int, n_ops: int, safe_dist: float, tool_clear: float,
                   space_width: float, space_height: float, space_depth: float,
                   robot_spacing: float, robot_margin: float, layout_type: str,
                   randomize: bool, seed: int) -> dict:
        rng = self._rng(randomize, seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤
        robot_positions = self._generate_robot_positions(
            n_robots, space_width, space_height, space_depth,
            robot_spacing, robot_margin, layout_type, rng
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤
        robots = []
        for i, pos in enumerate(robot_positions, 1):
            vbase = 1.0 + (rng.uniform(-0.3, 0.5) if randomize else 0.0)
            abase = 2.0 + (rng.uniform(-0.5, 0.8) if randomize else 0.0)
            robots.append({
                "id": i,
                "base_xyz": list(pos),
                "joint_limits": [[-180, 180], [-90, 90], [-90, 90], [-180, 180], [-90, 90], [-90, 90]],
                "vmax": [round(vbase, 2)] * 6,
                "amax": [round(abase, 2)] * 6,
                "tool_clearance": round(tool_clear, 3)
            })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        operations = []
        for i in range(n_ops):
            # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            pick_x = rng.uniform(robot_margin, robot_margin + space_width - robot_margin)
            pick_y = rng.uniform(robot_margin, robot_margin + space_height - robot_margin)
            # Pick –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–æ—Ç 0.1 –¥–æ 0.8 –æ—Ç –≤—ã—Å–æ—Ç—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            pick_z = rng.uniform(0.1, max(0.1, space_depth * 0.8))
            
            place_x = rng.uniform(robot_margin, robot_margin + space_width - robot_margin)
            place_y = rng.uniform(robot_margin, robot_margin + space_height - robot_margin)
            # Place –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–æ—Ç 0.1 –¥–æ 0.8 –æ—Ç –≤—ã—Å–æ—Ç—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            place_z = rng.uniform(0.1, max(0.1, space_depth * 0.8))
            
            pick = [round(pick_x, 3), round(pick_y, 3), round(pick_z, 3)]
            place = [round(place_x, 3), round(place_y, 3), round(place_z, 3)]
            t_hold = round(0.4 + (rng.random() * 0.8 if randomize else 0.6), 2)
            
            operations.append({
                "id": i + 1,
                "pick_xyz": pick,
                "place_xyz": place,
                "t_hold": t_hold
            })
        
        return {
            "robots": robots,
            "safe_dist": round(safe_dist, 3),
            "operations": operations,
            "space_settings": {
                "width": space_width,
                "height": space_height,
                "depth": space_depth,
                "robot_layout": layout_type
            }
        }

    def _build_txt(self, n_robots: int, n_ops: int, safe_dist: float, tool_clear: float,
                  space_width: float, space_height: float, space_depth: float,
                  robot_spacing: float, robot_margin: float, layout_type: str,
                  randomize: bool, seed: int) -> str:
        rng = self._rng(randomize, seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤
        robot_positions = self._generate_robot_positions(
            n_robots, space_width, space_height, space_depth,
            robot_spacing, robot_margin, layout_type, rng
        )
        
        lines = []
        # K N
        lines.append(f"{n_robots} {n_ops}")
        
        # –ü–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤
        for (x, y, z) in robot_positions:
            lines.append(f"{x} {y} {z}")
        
        # 6 —Å—Ç—Ä–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—É—Å—Ç–∞–≤–æ–≤
        for j in range(6):
            jmin, jmax = -180.0 if j in (0, 3) else -90.0, 180.0 if j in (0, 3) else 90.0
            vmax = 1.0 + (rng.uniform(-0.3, 0.5) if randomize else 0.0)
            amax = 2.0 + (rng.uniform(-0.5, 0.8) if randomize else 0.0)
            lines.append(f"{jmin} {jmax} {round(vmax,2)} {round(amax,2)}")
        
        # Tool_clearance Safe_dist
        lines.append(f"{round(tool_clear,3)} {round(safe_dist,3)}")
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        for i in range(n_ops):
            pick_x = rng.uniform(robot_margin, robot_margin + space_width - robot_margin)
            pick_y = rng.uniform(robot_margin, robot_margin + space_height - robot_margin)
            # Pick –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–æ—Ç 0.1 –¥–æ 0.8 –æ—Ç –≤—ã—Å–æ—Ç—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            pick_z = rng.uniform(0.1, max(0.1, space_depth * 0.8))
            
            place_x = rng.uniform(robot_margin, robot_margin + space_width - robot_margin)
            place_y = rng.uniform(robot_margin, robot_margin + space_height - robot_margin)
            # Place –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–æ—Ç 0.1 –¥–æ 0.8 –æ—Ç –≤—ã—Å–æ—Ç—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            place_z = rng.uniform(0.1, max(0.1, space_depth * 0.8))
            
            px, py, pz = round(pick_x, 3), round(pick_y, 3), round(pick_z, 3)
            qx, qy, qz = round(place_x, 3), round(place_y, 3), round(place_z, 3)
            t_i = round(0.4 + (rng.random() * 0.8 if randomize else 0.6), 2)
            lines.append(f"{px} {py} {pz} {qx} {qy} {qz} {t_i}")
        
        return "\n".join(lines) + "\n"
    
    def on_layout_type_changed(self, layout_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        if layout_type == "–®–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ (—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
            self.chess_widget.setVisible(True)
            
            # –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self.spin_robot_spacing.setVisible(False)
            self.spin_robot_margin.setVisible(False)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ª–µ–π–±–ª—ã –¥–ª—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for i in range(self.robot_layout.count()):
                item = self.robot_layout.itemAt(i)
                if item and item.widget():
                    widget = item.widget()
                    if isinstance(widget, QtWidgets.QLabel):
                        if "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–æ–±–æ—Ç–∞–º–∏" in widget.text():
                            widget.setVisible(False)
                        elif "–û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤" in widget.text():
                            widget.setVisible(False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            robot_count = self.chess_field.get_robot_count()
            if robot_count > 0:
                self.spin_robots.setValue(robot_count)
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
            self.chess_widget.setVisible(False)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self.spin_robot_spacing.setVisible(True)
            self.spin_robot_margin.setVisible(True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–π–±–ª—ã
            for i in range(self.robot_layout.count()):
                item = self.robot_layout.itemAt(i)
                if item and item.widget():
                    widget = item.widget()
                    if isinstance(widget, QtWidgets.QLabel):
                        widget.setVisible(True)
    
    def update_robot_positions_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        count = self.chess_field.get_robot_count()
        max_robots = self.spin_robots.value()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
        # –ï—Å–ª–∏ –≤ —Å–ø–∏–Ω–±–æ–∫—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ > 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ª–∏–º–∏—Ç
        # –ï—Å–ª–∏ 0, —Ç–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if max_robots > 0:
            self.chess_field.set_max_robots(max_robots)
        else:
            self.chess_field.set_max_robots(0)  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
        if max_robots > 0:
            self.robot_positions_info.setText(f"–í—ã–±—Ä–∞–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: {count}/{max_robots}")
        else:
            self.robot_positions_info.setText(f"–í—ã–±—Ä–∞–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: {count}")
        
        # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ –≤ —Å–ø–∏–Ω–±–æ–∫—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    def fill_chess_grid(self):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —à–∞—Ö–º–∞—Ç–Ω–æ–µ –ø–æ–ª–µ —Å–µ—Ç–∫–æ–π —Ä–æ–±–æ—Ç–æ–≤"""
        n_robots = self.spin_robots.value()
        positions = []
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i in range(n_robots):
            row = i // 8
            col = i % 8
            if row < 8:  # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
                positions.append((row, col))
        
        self.chess_field.set_positions(positions)
    
    def random_place_robots(self):
        """–°–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–º –ø–æ–ª–µ"""
        n_robots = self.spin_robots.value()
        positions = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        all_positions = [(r, c) for r in range(8) for c in range(8)]
        random.shuffle(all_positions)
        
        for i in range(min(n_robots, len(all_positions))):
            positions.append(all_positions[i])
        
        self.chess_field.set_positions(positions)
    
    def _generate_chess_positions(self, space_width: float, space_height: float, 
                                 space_depth: float, robot_spacing: float, 
                                 robot_margin: float) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
        positions = []
        chess_positions = self.chess_field.get_positions()
        
        if not chess_positions:
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - —Ä–∞–∑–º–µ—â–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ
            n_robots = self.spin_robots.value()
            if n_robots > 0:
                # –†–∞–∑–º–µ—â–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                center_x = space_width / 2
                center_y = space_height / 2
                
                # –†–∞–∑–º–µ—â–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤ –≤ –ª–∏–Ω–∏—é –ø–æ X –Ω–∞ –ø–æ–ª—É
                for i in range(n_robots):
                    x = center_x + (i - n_robots/2) * robot_spacing
                    y = center_y
                    z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –ø–æ–ª—É (z = 0)
                    positions.append((round(x, 3), round(y, 3), round(z, 3)))
            return positions
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        effective_width = space_width - 2 * robot_margin
        effective_height = space_height - 2 * robot_margin
        
        cell_width = effective_width / 8
        cell_height = effective_height / 8
        
        for row, col in chess_positions:
            # –¶–µ–Ω—Ç—Ä —è—á–µ–π–∫–∏
            x = robot_margin + col * cell_width + cell_width / 2
            y = robot_margin + row * cell_height + cell_height / 2
            z = 0.0  # –†–æ–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –Ω–∞ –ø–æ–ª—É (z = 0)
            
            positions.append((round(x, 3), round(y, 3), round(z, 3)))
        
        return positions
