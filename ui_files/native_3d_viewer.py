# -*- coding: utf-8 -*-
"""
–ù–∞—Ç–∏–≤–Ω—ã–π 3D Viewer –¥–ª—è ROBOTY —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenGL
"""

from PySide6 import QtWidgets, QtCore, QtGui, QtOpenGLWidgets
import sys
import logging
import os
import math
import numpy as np
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple

try:
    from OpenGL.GL import *
    from OpenGL.GLU import *
    from OpenGL.arrays import vbo
    OPENGL_AVAILABLE = True
except ImportError:
    OPENGL_AVAILABLE = False

try:
    import moderngl
    import moderngl_window
    MODERNGL_AVAILABLE = True
except ImportError:
    MODERNGL_AVAILABLE = False


class Native3DViewer(QtWidgets.QMainWindow):
    """–ù–∞—Ç–∏–≤–Ω—ã–π 3D Viewer —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenGL"""
    
    def __init__(self, plan_data=None):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger("ROBOTY.native_3d")
        self.log_file = self.setup_logging()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.plan_data = plan_data
        self.robots_data = []
        self.trajectories_data = []
        self.animation_time = 0.0
        self.animation_speed = 1.0
        self.is_playing = False
        
        # 3D –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.camera_x = 0.0
        self.camera_y = 0.0
        self.camera_z = 10.0
        self.rotation_x = 0.0
        self.rotation_y = 0.0
        self.zoom = 1.0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setup_window()
        self.setup_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –¥–∞–Ω–Ω—ã—Ö
        if self.plan_data:
            self.parse_plan_data()
        
        self.logger.info("Native 3D Viewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = os.path.join(log_dir, f"native_3d_viewer_{timestamp}.log")
        
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        logger = logging.getLogger("ROBOTY_NATIVE_3D_VIEWER")
        logger.setLevel(logging.DEBUG)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return log_file
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.setWindowTitle("üñ•Ô∏è ROBOTY Native 3D Viewer - –ù–∞—Ç–∏–≤–Ω–∞—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–∫–æ–Ω–∫–∞ –æ–∫–Ω–∞
        self.setWindowIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ComputerIcon))
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        self.main_layout = QtWidgets.QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(10)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.create_info_panel()
        
        # 3D –æ–±–ª–∞—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_3d_area()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.create_animation_panel()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.create_control_panel()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QtWidgets.QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    def create_info_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        info_group = QtWidgets.QGroupBox("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ")
        info_group.setMaximumHeight(100)
        info_layout = QtWidgets.QHBoxLayout(info_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–±–æ—Ç–∞—Ö
        self.robots_label = QtWidgets.QLabel("–†–æ–±–æ—Ç–æ–≤: 0")
        self.robots_label.setStyleSheet("font-weight: bold; color: #2E8B57;")
        info_layout.addWidget(self.robots_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_label = QtWidgets.QLabel("Makespan: 0.00 —Å–µ–∫")
        self.time_label.setStyleSheet("font-weight: bold; color: #4682B4;")
        info_layout.addWidget(self.time_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–∏–∑–∏—è—Ö
        self.collisions_label = QtWidgets.QLabel("–ö–æ–ª–ª–∏–∑–∏–π: 0")
        self.collisions_label.setStyleSheet("font-weight: bold; color: #DC143C;")
        info_layout.addWidget(self.collisions_label)
        
        info_layout.addStretch()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 3D –¥–≤–∏–∂–∫–µ
        engine_info = "OpenGL" if OPENGL_AVAILABLE else "Fallback"
        self.engine_label = QtWidgets.QLabel(f"3D –î–≤–∏–∂–æ–∫: {engine_info}")
        self.engine_label.setStyleSheet("font-weight: bold; color: #8B4513;")
        info_layout.addWidget(self.engine_label)
        
        self.main_layout.addWidget(info_group)
    
    def create_3d_area(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if OPENGL_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º OpenGL –≤–∏–¥–∂–µ—Ç
            self.gl_widget = OpenGL3DWidget(self)
            self.gl_widget.setMinimumHeight(400)
            self.main_layout.addWidget(self.gl_widget)
        else:
            # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            fallback_widget = QtWidgets.QLabel("""
            ‚ùå OpenGL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–π 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:
            ‚Ä¢ PyOpenGL
            ‚Ä¢ PyOpenGL-accelerate
            
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
            pip install PyOpenGL PyOpenGL-accelerate
            """)
            fallback_widget.setAlignment(QtCore.Qt.AlignCenter)
            fallback_widget.setStyleSheet("""
                color: red; 
                font-size: 14px; 
                background-color: #f0f0f0; 
                border: 2px solid #ccc;
                padding: 20px;
            """)
            self.main_layout.addWidget(fallback_widget)
    
    def create_animation_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        anim_group = QtWidgets.QGroupBox("üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–µ–π")
        anim_group.setMaximumHeight(80)
        anim_layout = QtWidgets.QHBoxLayout(anim_group)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
        self.play_button = QtWidgets.QPushButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏")
        self.play_button.setToolTip("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏/–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")
        self.play_button.clicked.connect(self.toggle_animation)
        anim_layout.addWidget(self.play_button)
        
        # –°–ª–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        self.time_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.time_slider.setRange(0, 1000)
        self.time_slider.setValue(0)
        self.time_slider.valueChanged.connect(self.set_animation_time)
        anim_layout.addWidget(self.time_slider)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.current_time_label = QtWidgets.QLabel("0.00 —Å–µ–∫")
        self.current_time_label.setMinimumWidth(80)
        anim_layout.addWidget(self.current_time_label)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        self.speed_label = QtWidgets.QLabel("–°–∫–æ—Ä–æ—Å—Ç—å:")
        anim_layout.addWidget(self.speed_label)
        
        self.speed_spinbox = QtWidgets.QDoubleSpinBox()
        self.speed_spinbox.setRange(0.1, 5.0)
        self.speed_spinbox.setValue(1.0)
        self.speed_spinbox.setSingleStep(0.1)
        self.speed_spinbox.valueChanged.connect(self.set_animation_speed)
        anim_layout.addWidget(self.speed_spinbox)
        
        self.main_layout.addWidget(anim_group)
    
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_group = QtWidgets.QGroupBox("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_group.setMaximumHeight(80)
        control_layout = QtWidgets.QHBoxLayout(control_group)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã
        self.reset_camera_button = QtWidgets.QPushButton("üì∑ –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã")
        self.reset_camera_button.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã")
        self.reset_camera_button.clicked.connect(self.reset_camera)
        control_layout.addWidget(self.reset_camera_button)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_button = QtWidgets.QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_button.setToolTip("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.export_button.clicked.connect(self.export_data)
        control_layout.addWidget(self.export_button)
        
        control_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = QtWidgets.QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_button.setToolTip("–ó–∞–∫—Ä—ã—Ç—å 3D Viewer")
        self.close_button.clicked.connect(self.close)
        control_layout.addWidget(self.close_button)
        
        self.main_layout.addWidget(control_group)
    
    def parse_plan_data(self):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if not self.plan_data:
            return
        
        try:
            self.robots_data = []
            self.trajectories_data = []
            
            robots = self.plan_data.get("robots", [])
            for robot in robots:
                robot_id = robot.get("id", 0)
                base_xyz = robot.get("base_xyz", [0, 0, 0])
                trajectory = robot.get("trajectory", [])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç–∞
                robot_data = {
                    "id": robot_id,
                    "base_xyz": base_xyz,
                    "color": self.get_robot_color(robot_id)
                }
                self.robots_data.append(robot_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
                trajectory_data = []
                for point in trajectory:
                    t = point.get("t", 0.0)
                    x = point.get("x", 0.0)
                    y = point.get("y", 0.0)
                    z = point.get("z", 0.0)
                    trajectory_data.append((t, x, y, z))
                
                self.trajectories_data.append(trajectory_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.update_info_panel()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
            if self.trajectories_data:
                max_time = max(max(point[0] for point in traj) for traj in self.trajectories_data)
                self.time_slider.setRange(0, int(max_time * 100))
            
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(self.robots_data)} —Ä–æ–±–æ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_robot_color(self, robot_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∞"""
        colors = [
            (1.0, 0.0, 0.0),  # –ö—Ä–∞—Å–Ω—ã–π
            (0.0, 1.0, 0.0),  # –ó–µ–ª–µ–Ω—ã–π
            (0.0, 0.0, 1.0),  # –°–∏–Ω–∏–π
            (1.0, 1.0, 0.0),  # –ñ–µ–ª—Ç—ã–π
            (1.0, 0.0, 1.0),  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            (0.0, 1.0, 1.0),  # –ì–æ–ª—É–±–æ–π
            (1.0, 0.5, 0.0),  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            (0.5, 0.0, 1.0),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ]
        return colors[robot_id % len(colors)]
    
    def update_info_panel(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏"""
        if not self.plan_data:
            return
        
        try:
            robots = self.plan_data.get("robots", [])
            makespan = self.plan_data.get("makespan", 0.0)
            
            self.robots_label.setText(f"–†–æ–±–æ—Ç–æ–≤: {len(robots)}")
            self.time_label.setText(f"Makespan: {makespan:.2f} —Å–µ–∫")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            collisions_count = 0
            if "collisions" in self.plan_data:
                collisions_count = len(self.plan_data["collisions"])
            elif "collision_count" in self.plan_data:
                collisions_count = self.plan_data["collision_count"]
            
            self.collisions_label.setText(f"–ö–æ–ª–ª–∏–∑–∏–π: {collisions_count}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def toggle_animation(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.is_playing = not self.is_playing
        if self.is_playing:
            self.play_button.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.start_animation_timer()
        else:
            self.play_button.setText("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏")
            self.stop_animation_timer()
    
    def start_animation_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.animation_timer = QtCore.QTimer()
        self.animation_timer.timeout.connect(self.update_animation)
        self.animation_timer.start(50)  # 20 FPS
    
    def stop_animation_timer(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏"""
        if hasattr(self, 'animation_timer'):
            self.animation_timer.stop()
    
    def update_animation(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        if not self.trajectories_data:
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.animation_time += 0.05 * self.animation_speed
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        max_time = max(max(point[0] for point in traj) for traj in self.trajectories_data)
        
        # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if self.animation_time > max_time:
            self.animation_time = 0.0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
        self.time_slider.setValue(int(self.animation_time * 100))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.current_time_label.setText(f"{self.animation_time:.2f} —Å–µ–∫")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º 3D –≤–∏–¥–∂–µ—Ç
        if hasattr(self, 'gl_widget'):
            self.gl_widget.update()
    
    def set_animation_time(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.animation_time = value / 100.0
        self.current_time_label.setText(f"{self.animation_time:.2f} —Å–µ–∫")
        
        if hasattr(self, 'gl_widget'):
            self.gl_widget.update()
    
    def set_animation_speed(self, speed):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.animation_speed = speed
    
    def reset_camera(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã"""
        self.camera_x = 0.0
        self.camera_y = 0.0
        self.camera_z = 10.0
        self.rotation_x = 0.0
        self.rotation_y = 0.0
        self.zoom = 1.0
        
        if hasattr(self, 'gl_widget'):
            self.gl_widget.update()
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "roboty_3d_data.json",
                "JSON Files (*.json);;All Files (*)"
            )
            
            if file_path:
                import json
                export_data = {
                    "robots": self.robots_data,
                    "trajectories": self.trajectories_data,
                    "plan": self.plan_data
                }
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                self.status_bar.showMessage(f"üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
                self.logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.stop_animation_timer()
            self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ Native 3D Viewer")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        
        event.accept()


class OpenGL3DWidget(QtOpenGLWidgets.QOpenGLWidget):
    """OpenGL –≤–∏–¥–∂–µ—Ç –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_viewer = parent
        self.last_pos = QtCore.QPoint()
    
    def initializeGL(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenGL"""
        if not OPENGL_AVAILABLE:
            return
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenGL
            glEnable(GL_DEPTH_TEST)
            glEnable(GL_LIGHTING)
            glEnable(GL_LIGHT0)
            glEnable(GL_COLOR_MATERIAL)
            glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–µ—Ç–∞
            glLightfv(GL_LIGHT0, GL_POSITION, [0, 0, 10, 1])
            glLightfv(GL_LIGHT0, GL_AMBIENT, [0.2, 0.2, 0.2, 1])
            glLightfv(GL_LIGHT0, GL_DIFFUSE, [0.8, 0.8, 0.8, 1])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            glMaterialfv(GL_FRONT, GL_SPECULAR, [1, 1, 1, 1])
            glMaterialf(GL_FRONT, GL_SHININESS, 50)
            
            glClearColor(0.1, 0.1, 0.1, 1.0)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenGL: {e}")
    
    def paintGL(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ OpenGL"""
        if not OPENGL_AVAILABLE or not self.parent_viewer:
            return
        
        try:
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
            glLoadIdentity()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
            viewer = self.parent_viewer
            glTranslatef(viewer.camera_x, viewer.camera_y, -viewer.camera_z * viewer.zoom)
            glRotatef(viewer.rotation_x, 1, 0, 0)
            glRotatef(viewer.rotation_y, 0, 1, 0)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –æ—Å–µ–π
            self.draw_axes()
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–±–æ—Ç–æ–≤ –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
            self.draw_robots_and_trajectories()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ OpenGL: {e}")
    
    def draw_axes(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –æ—Å–µ–π"""
        if not OPENGL_AVAILABLE:
            return
        
        glDisable(GL_LIGHTING)
        glLineWidth(2)
        
        # X –æ—Å—å (–∫—Ä–∞—Å–Ω–∞—è)
        glColor3f(1, 0, 0)
        glBegin(GL_LINES)
        glVertex3f(0, 0, 0)
        glVertex3f(5, 0, 0)
        glEnd()
        
        # Y –æ—Å—å (–∑–µ–ª–µ–Ω–∞—è)
        glColor3f(0, 1, 0)
        glBegin(GL_LINES)
        glVertex3f(0, 0, 0)
        glVertex3f(0, 5, 0)
        glEnd()
        
        # Z –æ—Å—å (—Å–∏–Ω—è—è)
        glColor3f(0, 0, 1)
        glBegin(GL_LINES)
        glVertex3f(0, 0, 0)
        glVertex3f(0, 0, 5)
        glEnd()
        
        glEnable(GL_LIGHTING)
    
    def draw_robots_and_trajectories(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–±–æ—Ç–æ–≤ –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
        if not OPENGL_AVAILABLE or not self.parent_viewer:
            return
        
        viewer = self.parent_viewer
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        for i, trajectory in enumerate(viewer.trajectories_data):
            if i < len(viewer.robots_data):
                color = viewer.robots_data[i]["color"]
                glColor3f(*color)
                
                glDisable(GL_LIGHTING)
                glLineWidth(3)
                glBegin(GL_LINE_STRIP)
                
                for point in trajectory:
                    t, x, y, z = point
                    glVertex3f(x, y, z)
                
                glEnd()
                glEnable(GL_LIGHTING)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–±–æ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        for i, trajectory in enumerate(viewer.trajectories_data):
            if i < len(viewer.robots_data):
                robot_data = viewer.robots_data[i]
                color = robot_data["color"]
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–±–æ—Ç–∞
                current_pos = self.get_robot_position_at_time(trajectory, viewer.animation_time)
                
                if current_pos:
                    x, y, z = current_pos
                    
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π –∫—É–±)
                    glColor3f(*color)
                    glPushMatrix()
                    glTranslatef(x, y, z)
                    self.draw_cube(0.3)
                    glPopMatrix()
    
    def get_robot_position_at_time(self, trajectory, time):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ä–æ–±–æ—Ç–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not trajectory:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏
        for i in range(len(trajectory) - 1):
            t1, x1, y1, z1 = trajectory[i]
            t2, x2, y2, z2 = trajectory[i + 1]
            
            if t1 <= time <= t2:
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                alpha = (time - t1) / (t2 - t1) if t2 != t1 else 0
                x = x1 + alpha * (x2 - x1)
                y = y1 + alpha * (y2 - y1)
                z = z1 + alpha * (z2 - z1)
                return (x, y, z)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        if trajectory:
            _, x, y, z = trajectory[-1]
            return (x, y, z)
        
        return None
    
    def draw_cube(self, size):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—É–±–∞"""
        if not OPENGL_AVAILABLE:
            return
        
        s = size / 2
        vertices = [
            [-s, -s, -s], [s, -s, -s], [s, s, -s], [-s, s, -s],  # –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
            [-s, -s, s], [s, -s, s], [s, s, s], [-s, s, s]       # –ø–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
        ]
        
        faces = [
            [0, 1, 2, 3], [4, 7, 6, 5], [0, 4, 5, 1],
            [2, 6, 7, 3], [0, 3, 7, 4], [1, 5, 6, 2]
        ]
        
        glBegin(GL_QUADS)
        for face in faces:
            for vertex in face:
                glVertex3fv(vertices[vertex])
        glEnd()
    
    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏"""
        self.last_pos = event.position().toPoint()
    
    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        if not self.parent_viewer:
            return
        
        dx = event.position().x() - self.last_pos.x()
        dy = event.position().y() - self.last_pos.y()
        
        if event.buttons() & QtCore.Qt.LeftButton:
            # –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã
            self.parent_viewer.rotation_y += dx * 0.5
            self.parent_viewer.rotation_x += dy * 0.5
            self.update()
        elif event.buttons() & QtCore.Qt.RightButton:
            # –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.parent_viewer.camera_x += dx * 0.01
            self.parent_viewer.camera_y -= dy * 0.01
            self.update()
        
        self.last_pos = event.position().toPoint()
    
    def wheelEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏"""
        if not self.parent_viewer:
            return
        
        # –ó—É–º
        delta = event.angleDelta().y()
        if delta > 0:
            self.parent_viewer.zoom *= 1.1
        else:
            self.parent_viewer.zoom /= 1.1
        
        self.parent_viewer.zoom = max(0.1, min(10.0, self.parent_viewer.zoom))
        self.update()
    
    def resizeGL(self, width, height):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        if not OPENGL_AVAILABLE:
            return
        
        glViewport(0, 0, width, height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, width / height, 0.1, 100.0)
        glMatrixMode(GL_MODELVIEW)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Native 3D Viewer"""
    try:
        app = QtWidgets.QApplication(sys.argv)
        app.setApplicationName("ROBOTY Native 3D Viewer")
        app.setApplicationVersion("1.0")
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        window = Native3DViewer()
        window.show()
        
        logger = logging.getLogger("ROBOTY_NATIVE_3D_VIEWER.main")
        logger.info("Native 3D Viewer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Native 3D Viewer: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
