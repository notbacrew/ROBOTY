# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D Viewer –¥–ª—è ROBOTY (–±–µ–∑ WebEngine)
"""

from PySide6 import QtWidgets, QtCore, QtGui
import sys
import logging
import os
import tempfile
import webbrowser
from datetime import datetime
from typing import Dict, Any, Optional

from viz.visualizer import show_visualization


class Simple3DViewer(QtWidgets.QMainWindow):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D Viewer –±–µ–∑ WebEngine"""
    
    def __init__(self, plan_data=None):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger("ROBOTY.3d_viewer")
        self.log_file = self.setup_logging()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.plan_data = plan_data
        self.html_file_path = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setup_window()
        self.setup_ui()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if self.plan_data:
            self.generate_visualization()
        
        self.logger.info("Simple 3D Viewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = os.path.join(log_dir, f"simple_3d_viewer_{timestamp}.log")
        
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        logger = logging.getLogger("ROBOTY_SIMPLE_3D_VIEWER")
        logger.setLevel(logging.DEBUG)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return log_file
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.setWindowTitle("üñ•Ô∏è ROBOTY 3D Viewer - –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        self.setGeometry(100, 100, 1000, 700)
        
        # –ò–∫–æ–Ω–∫–∞ –æ–∫–Ω–∞
        self.setWindowIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ComputerIcon))
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        self.main_layout = QtWidgets.QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(10)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.create_info_panel()
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_visualization_area()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.create_control_panel()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QtWidgets.QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    def create_info_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        info_group = QtWidgets.QGroupBox("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ")
        info_group.setMaximumHeight(100)
        info_layout = QtWidgets.QHBoxLayout(info_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–±–æ—Ç–∞—Ö
        self.robots_label = QtWidgets.QLabel("–†–æ–±–æ—Ç–æ–≤: 0")
        self.robots_label.setStyleSheet("font-weight: bold; color: #2E8B57;")
        info_layout.addWidget(self.robots_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_label = QtWidgets.QLabel("Makespan: 0.00 —Å–µ–∫")
        self.time_label.setStyleSheet("font-weight: bold; color: #4682B4;")
        info_layout.addWidget(self.time_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–∏–∑–∏—è—Ö
        self.collisions_label = QtWidgets.QLabel("–ö–æ–ª–ª–∏–∑–∏–π: 0")
        self.collisions_label.setStyleSheet("font-weight: bold; color: #DC143C;")
        info_layout.addWidget(self.collisions_label)
        
        info_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = QtWidgets.QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
        self.refresh_button.clicked.connect(self.refresh_visualization)
        info_layout.addWidget(self.refresh_button)
        
        self.main_layout.addWidget(info_group)
    
    def create_visualization_area(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        viz_group = QtWidgets.QGroupBox("üéÆ 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        viz_layout = QtWidgets.QVBoxLayout(viz_group)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.info_text = QtWidgets.QTextEdit()
        self.info_text.setReadOnly(True)
        self.info_text.setMinimumHeight(300)
        self.info_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 12px;
            }
        """)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = """
üñ•Ô∏è ROBOTY 3D Viewer

–≠—Ç–æ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤.

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–µ
‚Ä¢ üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
‚Ä¢ üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–æ–≤

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        self.info_text.setPlainText(initial_message)
        
        viz_layout.addWidget(self.info_text)
        self.main_layout.addWidget(viz_group)
    
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_group = QtWidgets.QGroupBox("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_group.setMaximumHeight(80)
        control_layout = QtWidgets.QHBoxLayout(control_group)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        self.open_browser_button = QtWidgets.QPushButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        self.open_browser_button.setToolTip("–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
        self.open_browser_button.clicked.connect(self.open_in_browser)
        control_layout.addWidget(self.open_browser_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button = QtWidgets.QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML")
        self.save_button.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Ñ–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.save_button.clicked.connect(self.save_html)
        control_layout.addWidget(self.save_button)
        
        control_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = QtWidgets.QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_button.setToolTip("–ó–∞–∫—Ä—ã—Ç—å 3D Viewer")
        self.close_button.clicked.connect(self.close)
        control_layout.addWidget(self.close_button)
        
        self.main_layout.addWidget(control_group)
    
    def generate_visualization(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        if not self.plan_data:
            self.status_bar.showMessage("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            self.update_info_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        try:
            self.status_bar.showMessage("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan = dict(self.plan_data)
            robots = plan.get("robots", [])
            n_robots = len(robots)
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if n_robots >= 4:
                plan["max_anim_frames"] = 60
                plan["anim_time_stride"] = 0.2
                plan["arm_segments"] = 2
                plan["robot_mesh"] = None  # –û—Ç–∫–ª—é—á–∞–µ–º 3D –º–æ–¥–µ–ª–∏
                plan["arm_mesh"] = True    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                self.logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã")
            
            if n_robots >= 8:
                plan["max_anim_frames"] = 40
                plan["anim_time_stride"] = 0.3
                plan["arm_segments"] = 1
                self.logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            plan["desktop_mode"] = True
            plan["high_performance"] = True
            plan["light_mesh_anim"] = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.update_info_panel()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            def progress_callback(progress):
                self.status_bar.showMessage(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {int(progress)}%")
                QtWidgets.QApplication.processEvents()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            show_visualization(plan, "3d_anim", progress_callback=progress_callback)
            
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
            self.find_html_file()
            
            self.status_bar.showMessage("‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
            self.logger.info("3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
            self.update_info_text("‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            self.status_bar.showMessage(error_msg)
            self.logger.error(error_msg, exc_info=True)
            self.update_info_text(error_msg)
    
    def find_html_file(self):
        """–ò—â–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π HTML —Ñ–∞–π–ª"""
        try:
            html_files = []
            for root, dirs, files in os.walk("."):
                for file in files:
                    if file.endswith("_viz_3d_anim.html"):
                        html_files.append(os.path.join(root, file))
            
            if html_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                latest_file = max(html_files, key=os.path.getmtime)
                self.html_file_path = os.path.abspath(latest_file)
                self.logger.info(f"HTML —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {latest_file}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info_text = f"""
‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!

üìÅ HTML —Ñ–∞–π–ª: {os.path.basename(self.html_file_path)}
üìç –ü—É—Ç—å: {self.html_file_path}

üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ:
‚Ä¢ –†–æ–±–æ—Ç–æ–≤: {len(self.plan_data.get('robots', []))}
‚Ä¢ Makespan: {self.plan_data.get('makespan', 0.0):.2f} —Å–µ–∫
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                """
                self.update_info_text(info_text)
            else:
                self.update_info_text("‚ö†Ô∏è HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ HTML —Ñ–∞–π–ª–∞: {e}")
            self.update_info_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ HTML —Ñ–∞–π–ª–∞: {e}")
    
    def update_info_text(self, text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        self.info_text.setPlainText(text)
    
    def update_info_panel(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏"""
        if not self.plan_data:
            return
        
        try:
            robots = self.plan_data.get("robots", [])
            makespan = self.plan_data.get("makespan", 0.0)
            
            self.robots_label.setText(f"–†–æ–±–æ—Ç–æ–≤: {len(robots)}")
            self.time_label.setText(f"Makespan: {makespan:.2f} —Å–µ–∫")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            collisions_count = 0
            if "collisions" in self.plan_data:
                collisions_count = len(self.plan_data["collisions"])
            elif "collision_count" in self.plan_data:
                collisions_count = self.plan_data["collision_count"]
            
            self.collisions_label.setText(f"–ö–æ–ª–ª–∏–∑–∏–π: {collisions_count}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def refresh_visualization(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.generate_visualization()
    
    def open_in_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if self.html_file_path and os.path.exists(self.html_file_path):
                webbrowser.open(f"file://{self.html_file_path}")
                self.status_bar.showMessage("üåê –û—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                self.logger.info(f"HTML —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {self.html_file_path}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info_text = f"""
üåê –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!

üìÅ –§–∞–π–ª: {os.path.basename(self.html_file_path)}
üìç –ü—É—Ç—å: {self.html_file_path}

‚úÖ 3D –∞–Ω–∏–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.
–ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—É—Ç—å –≤—ã—à–µ
–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞.
                """
                self.update_info_text(info_text)
            else:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.update_info_text("‚ö†Ô∏è HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
    
    def save_html(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML —Ñ–∞–π–ª"""
        try:
            if self.html_file_path and os.path.exists(self.html_file_path):
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                    self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Ñ–∞–π–ª", "roboty_visualization.html",
                    "HTML Files (*.html);;All Files (*)"
                )
                
                if file_path:
                    import shutil
                    shutil.copy2(self.html_file_path, file_path)
                    self.status_bar.showMessage(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                    self.logger.info(f"HTML —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    info_text = f"""
üíæ HTML —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {os.path.basename(file_path)}
üìç –ü—É—Ç—å: {file_path}

‚úÖ –§–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
                    """
                    self.update_info_text(info_text)
            else:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.update_info_text("‚ö†Ô∏è HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ Simple 3D Viewer")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Simple 3D Viewer"""
    try:
        app = QtWidgets.QApplication(sys.argv)
        app.setApplicationName("ROBOTY Simple 3D Viewer")
        app.setApplicationVersion("1.0")
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        window = Simple3DViewer()
        window.show()
        
        logger = logging.getLogger("ROBOTY_SIMPLE_3D_VIEWER.main")
        logger.info("Simple 3D Viewer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Simple 3D Viewer: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
