# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ROBOTY
"""

from PySide6 import QtWidgets, QtCore, QtGui
import sys
import logging
import os
from datetime import datetime
from typing import Dict, Any, Optional

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psutil —Å fallback
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

from ui_files.main_window_improved import Ui_MainWindow
from ui_files.input_generator_dialog import InputGeneratorDialog
from ui_files.styles_final import get_light_style, get_dark_style
from core.parser import parse_input_file
from core.planner import run_planner_algorithm
from core.collision import check_collisions, check_collisions_detailed, get_collision_summary
from viz.visualizer import show_visualization
from core.safety import enforce_online_safety
from core.parser_txt import RobotConfig, Operation


class SimpleDesktopApp(QtWidgets.QMainWindow, Ui_MainWindow):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"""
    
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_file = self.setup_logging()
        self.logger = logging.getLogger("ROBOTY.desktop")
        self.logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.input_data = None
        self.plan = None
        self.current_theme = 'dark'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.setup_ui()
        self.apply_theme(self.current_theme)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        self.show_system_info()
        
        self.logger.info("–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = os.path.join(log_dir, f"desktop_app_{timestamp}.log")
        
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        root_logger = logging.getLogger("ROBOTY_DESKTOP")
        root_logger.setLevel(logging.DEBUG)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)
        
        return log_file
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.pushButton_load.clicked.connect(self.load_file)
        self.pushButton_run.clicked.connect(self.run_planner_optimized)
        self.pushButton_viz.clicked.connect(self.open_visualizer_optimized)
        self.pushButton_save.clicked.connect(self.save_result)
        self.pushButton_clear_logs.clicked.connect(self.clear_logs)
        self.pushButton_input_gen.clicked.connect(self.open_input_generator)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
        self.actionLoad.triggered.connect(self.load_file)
        self.actionSave.triggered.connect(self.save_result)
        self.actionSaveAs.triggered.connect(self.save_result_as)
        self.actionExit.triggered.connect(self.close)
        self.actionAbout.triggered.connect(self.show_about)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.comboBox_assignment_method.currentTextChanged.connect(self.update_genetic_controls)
        self.update_genetic_controls()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
        self.setup_theme_toggle()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        if hasattr(self, 'progressBar_status'):
            self.progressBar_status.setVisible(False)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if hasattr(self, 'checkBox_arm_mesh'):
            self.checkBox_arm_mesh.stateChanged.connect(self.sync_model_selector_visibility)
            self.sync_model_selector_visibility()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        self.textLog.append("üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ROBOTY –∑–∞–ø—É—â–µ–Ω–æ")
        self.textLog.append(f"üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.log_file}")
        self.textLog.append(f"üé® –¢–µ–º–∞: {self.current_theme.title()}")
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            import multiprocessing
            cpu_cores = multiprocessing.cpu_count()
            
            if PSUTIL_AVAILABLE:
                memory = psutil.virtual_memory()
                memory_gb = memory.total / (1024**3)
                memory_usage = memory.percent
                self.textLog.append(f"üíª –°–∏—Å—Ç–µ–º–∞: {cpu_cores} —è–¥–µ—Ä, {memory_gb:.1f} –ì–ë RAM")
                self.textLog.append(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {memory_usage:.1f}%")
            else:
                self.textLog.append(f"üíª –°–∏—Å—Ç–µ–º–∞: {cpu_cores} —è–¥–µ—Ä")
                self.textLog.append("‚ö†Ô∏è psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            self.textLog.append("üöÄ –†–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            self.textLog.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
    
    def run_planner_optimized(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        assignment_method = self.get_assignment_method()
        self.textLog.append(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º): {assignment_method}")
        
        if not self.input_data:
            self.textLog.append("‚ùå –ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return
        
        try:
            self.show_busy("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            n_robots = len(self.input_data.robots) if hasattr(self.input_data, 'robots') else 0
            n_operations = len(self.input_data.operations) if hasattr(self.input_data, 'operations') else 0
            
            self.textLog.append(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω—ã: {n_robots} —Ä–æ–±–æ—Ç–æ–≤, {n_operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if assignment_method == "genetic":
                genetic_params = self.get_genetic_parameters()
                from core.genetic_algorithm import assign_operations_genetic
                assignments = assign_operations_genetic(
                    self.input_data, 
                    genetic_params['population_size'], 
                    genetic_params['generations']
                )
                
                from core.planner import plan_robot_trajectory, calculate_makespan
                robot_trajectories = []
                robot_plans = []
                
                for i, (robot, operations) in enumerate(zip(self.input_data.robots, assignments)):
                    trajectory = plan_robot_trajectory(robot, operations)
                    robot_trajectories.append(trajectory)
                    
                    viz_trajectory = []
                    for wp in trajectory:
                        viz_trajectory.append({
                            "t": wp[0], "x": wp[1], "y": wp[2], "z": wp[3]
                        })
                    
                    robot_plans.append({
                        "id": i + 1,
                        "base_xyz": robot.base_xyz,
                        "trajectory": viz_trajectory,
                        "tool_clearance": robot.tool_clearance,
                        "operations_count": len(operations)
                    })
                
                makespan = calculate_makespan(robot_trajectories)
                self.plan = {
                    "robots": robot_plans,
                    "makespan": makespan,
                    "safe_dist": self.input_data.safe_dist,
                    "assignment_method": assignment_method
                }
            else:
                self.plan = run_planner_algorithm(self.input_data, assignment_method)
            
            self.textLog.append("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (–¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º)")
            
            makespan = self.plan.get("makespan", 0.0)
            self.textLog.append(f"üìä Makespan: {makespan:.2f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
            self.textLog.append("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π...")
            collisions = check_collisions_detailed(self.plan)
            if collisions:
                self.textLog.append(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(collisions)} –∫–æ–ª–ª–∏–∑–∏–π! –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—É–∑—ã...")
                self.plan = enforce_online_safety(self.plan, time_step=0.05, pause_duration=0.6)
                self.textLog.append("‚úÖ –ö–æ–ª–ª–∏–∑–∏–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏.")
            else:
                self.textLog.append("‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            
            self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            self.textLog.append(error_msg)
            self.logger.error(error_msg, exc_info=True)
        finally:
            self.hide_busy()
    
    def open_visualizer_optimized(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.logger.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        
        if not self.plan:
            self.textLog.append("–ù–µ—Ç –ø–ª–∞–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")
            return
        
        try:
            self.show_busy("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ü–µ–Ω
            robots = self.plan.get("robots", [])
            n_robots = len(robots)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if n_robots >= 4:
                self.plan["max_anim_frames"] = 60
                self.plan["anim_time_stride"] = 0.2
                self.plan["arm_segments"] = 2
                self.plan["robot_mesh"] = None  # –û—Ç–∫–ª—é—á–∞–µ–º 3D –º–æ–¥–µ–ª–∏
                self.plan["arm_mesh"] = True    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                self.textLog.append("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã")
            
            if n_robots >= 8:
                self.plan["max_anim_frames"] = 40
                self.plan["anim_time_stride"] = 0.3
                self.plan["arm_segments"] = 1
                self.textLog.append("‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å—Ü–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            show_visualization(self.plan, "3d_anim")
            
            self.textLog.append("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            self.textLog.append(error_msg)
            self.logger.error(error_msg, exc_info=True)
        finally:
            self.hide_busy()
    
    def show_busy(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞..."):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            self.statusbar.showMessage(message)
            if hasattr(self, 'progressBar_status'):
                self.progressBar_status.setRange(0, 0)
                self.progressBar_status.setVisible(True)
                self.progressBar_status.repaint()
            QtWidgets.QApplication.processEvents()
        except Exception:
            pass
    
    def hide_busy(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            self.statusbar.clearMessage()
            if hasattr(self, 'progressBar_status'):
                self.progressBar_status.setVisible(False)
                self.progressBar_status.setRange(0, 100)
        except Exception:
            pass
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    def load_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", "data/",
            "JSON Files (*.json);;Text Files (*.txt);;All Files (*)"
        )
        
        if path:
            self.textLog.append(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {path}")
            try:
                self.input_data = parse_input_file(path)
                self.textLog.append("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                if hasattr(self.input_data, 'robots'):
                    self.textLog.append(f"ü§ñ –†–æ–±–æ—Ç–æ–≤: {len(self.input_data.robots)}")
                if hasattr(self.input_data, 'operations'):
                    self.textLog.append(f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏–π: {len(self.input_data.operations)}")
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
                self.textLog.append(error_msg)
                self.logger.error(error_msg, exc_info=True)
    
    def save_result(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not self.plan:
            self.textLog.append("–ù–µ—Ç –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        results_dir = os.path.join(os.path.dirname(__file__), "..", "outputs", "results")
        os.makedirs(results_dir, exist_ok=True)
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", results_dir, 
            "Text Files (*.txt);;JSON Files (*.json)"
        )
        
        if path:
            try:
                if path.endswith('.json'):
                    import json
                    with open(path, 'w', encoding='utf-8') as f:
                        json.dump(self.plan, f, indent=2, ensure_ascii=False)
                else:
                    from core.parser_txt import save_plan_to_txt
                    robots_waypoints = []
                    for robot in self.plan["robots"]:
                        waypoints = []
                        for wp in robot["trajectory"]:
                            t = wp.get("t", 0.0)
                            x = wp.get("x", 0.0)
                            y = wp.get("y", 0.0)
                            z = wp.get("z", 0.0)
                            waypoints.append((t, x, y, z))
                        robots_waypoints.append((robot["id"], waypoints))
                    
                    makespan = self.plan.get("makespan", 0.0)
                    save_plan_to_txt(path, makespan, robots_waypoints)
                
                self.textLog.append(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"
                self.textLog.append(error_msg)
                self.logger.error(error_msg, exc_info=True)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.textLog.clear()
        self.textLog.append("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        self.logger.info("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def get_assignment_method(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        method_map = {
            "Round Robin (–ø–æ –æ—á–µ—Ä–µ–¥–∏)": "round_robin",
            "Balanced (–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏)": "balanced",
            "Distance Based (–ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é)": "distance_based",
            "Genetic Algorithm (–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π)": "genetic"
        }
        return method_map.get(self.comboBox_assignment_method.currentText(), "balanced")
    
    def get_genetic_parameters(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        return {
            "population_size": self.spinBox_population_size.value(),
            "generations": self.spinBox_generations.value()
        }
    
    def update_genetic_controls(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        is_genetic = self.comboBox_assignment_method.currentText().startswith("Genetic")
        self.label_genetic_population.setVisible(is_genetic)
        self.spinBox_population_size.setVisible(is_genetic)
        self.label_genetic_generations.setVisible(is_genetic)
        self.spinBox_generations.setVisible(is_genetic)
    
    def sync_model_selector_visibility(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        try:
            is_on = bool(self.get_arm_mesh_enabled()) if hasattr(self, 'get_arm_mesh_enabled') else False
            if hasattr(self, 'label_robot_model'):
                self.label_robot_model.setVisible(is_on)
            if hasattr(self, 'comboBox_robot_model'):
                self.comboBox_robot_model.setVisible(is_on)
        except Exception:
            pass
    
    def get_arm_mesh_enabled(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ 3D –º–µ—à–∞"""
        return self.checkBox_arm_mesh.isChecked()
    
    def apply_theme(self, theme_name):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É"""
        try:
            if theme_name == 'light':
                style = get_light_style()
                self.current_theme = 'light'
            elif theme_name == 'dark':
                style = get_dark_style()
                self.current_theme = 'dark'
            else:
                style = get_light_style()
                self.current_theme = 'light'

            app = QtWidgets.QApplication.instance()
            if app is not None:
                app.setStyleSheet(style)
            else:
                self.setStyleSheet(style)
            
            if hasattr(self, 'pushButton_theme_toggle'):
                if self.current_theme == 'light':
                    self.pushButton_theme_toggle.setText("üåô")
                    self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É")
                else:
                    self.pushButton_theme_toggle.setText("‚òÄÔ∏è")
                    self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
            
            self.logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: {theme_name}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã {theme_name}: {e}")
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É"""
        new_theme = 'dark' if self.current_theme == 'light' else 'light'
        self.apply_theme(new_theme)
        self.textLog.append(f"üé® –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_theme.title()} —Ç–µ–º—É")
    
    def setup_theme_toggle(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã"""
        self.pushButton_theme_toggle = QtWidgets.QPushButton("üåô")
        self.pushButton_theme_toggle.setProperty("class", "theme-toggle")
        self.pushButton_theme_toggle.clicked.connect(self.toggle_theme)
        self.pushButton_theme_toggle.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        
        self.theme_container = QtWidgets.QWidget()
        self.theme_layout = QtWidgets.QHBoxLayout(self.theme_container)
        self.theme_layout.setContentsMargins(0, 0, 0, 0)
        self.theme_layout.addStretch()
        self.theme_layout.addWidget(self.pushButton_theme_toggle)
        
        self.verticalLayout_main.addWidget(self.theme_container)
    
    def open_input_generator(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            dlg = InputGeneratorDialog(self)
            if hasattr(self, 'current_theme'):
                if self.current_theme == 'dark':
                    from ui_files.styles_final import get_dark_style
                    dlg.setStyleSheet(get_dark_style())
                else:
                    from ui_files.styles_final import get_light_style
                    dlg.setStyleSheet(get_light_style())
            
            if dlg.exec() == QtWidgets.QDialog.Accepted and getattr(dlg, 'saved_path', None):
                path = dlg.saved_path
                self.textLog.append(f"üì• –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {path}")
                if getattr(dlg, 'load_into_app', False):
                    try:
                        self.input_data = parse_input_file(path)
                        self.textLog.append("‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    except Exception as e:
                        self.textLog.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        except Exception as e:
            self.textLog.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    def save_result_as(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã–±–æ—Ä–æ–º –∏–º–µ–Ω–∏"""
        try:
            if self.plan is None:
                QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "", 
                "JSON —Ñ–∞–π–ª—ã (*.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
            )
            
            if file_path:
                import json
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.plan, f, indent=2, ensure_ascii=False)
                
                self.textLog.append(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            about_text = """
            <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                <h2 style="color: #FF6B35; margin-bottom: 20px;">üñ•Ô∏è ROBOTY Desktop v1.0.0</h2>
                <h3 style="color: #4682B4; margin-bottom: 15px;">–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
                
                <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                    <strong>–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</strong> –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏ 
                    –∏ —Å–ª–æ–∂–Ω—ã–º–∏ –º–Ω–æ–≥–æ—Ä–æ–±–æ—Ç–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
                </p>
                
                <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4 style="color: #FF6B35; margin-top: 0;">üöÄ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</strong> –ë–µ–∑ –≤—ã–ª–µ—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π</li>
                        <li><strong>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
                        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:</strong> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö</li>
                        <li><strong>–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</strong> –õ–µ–≥–∫–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏</li>
                    </ul>
                </div>
                
                <div style="border-top: 2px solid #FF6B35; padding-top: 15px; margin-top: 20px;">
                    <p style="margin: 5px 0;"><strong>üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</strong> ROBOTY Team</p>
                    <p style="margin: 5px 0;"><strong>üñ•Ô∏è –í–µ—Ä—Å–∏—è:</strong> Desktop Simplified</p>
                    <p style="margin: 5px 0;"><strong>üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è:</strong> MIT License</p>
                </div>
            </div>
            """
            
            QtWidgets.QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ ROBOTY Desktop", about_text)
            self.logger.info("–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ': {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        app = QtWidgets.QApplication(sys.argv)
        app.setApplicationName("ROBOTY Desktop")
        app.setApplicationVersion("1.0")
        
        window = SimpleDesktopApp()
        window.show()
        
        logger = logging.getLogger("ROBOTY_DESKTOP.main")
        logger.info("–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
